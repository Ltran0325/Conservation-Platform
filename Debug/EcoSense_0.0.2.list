
EcoSense_0.0.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  08004cd4  08004cd4  00014cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  000201bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005108  08005108  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000265c  200001bc  080052cc  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002818  080052cc  00022818  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000df62  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f6  00000000  00000000  0002e14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00030348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00030dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026488  00000000  00000000  00031770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce8d  00000000  00000000  00057bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eaea8  00000000  00000000  00064a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f92d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  0014f980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001bc 	.word	0x200001bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cbc 	.word	0x08004cbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001c0 	.word	0x200001c0
 80001cc:	08004cbc 	.word	0x08004cbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <api_wifi_connect>:
 *  @brief        : High level function to issue command sequence to allow
 *  				ping to google.com
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_connect(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 800057c:	2014      	movs	r0, #20
 800057e:	f001 f85f 	bl	8001640 <HAL_Delay>
	if( api_wifi_echodisable() ){
 8000582:	f000 f987 	bl	8000894 <api_wifi_echodisable>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <api_wifi_connect+0x18>
		return FAIL;
 800058c:	2301      	movs	r3, #1
 800058e:	e01e      	b.n	80005ce <api_wifi_connect+0x56>
	}

	HAL_Delay(20);
 8000590:	2014      	movs	r0, #20
 8000592:	f001 f855 	bl	8001640 <HAL_Delay>
	if( api_wifi_station() ){
 8000596:	f000 f853 	bl	8000640 <api_wifi_station>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <api_wifi_connect+0x2c>
		return FAIL;
 80005a0:	2301      	movs	r3, #1
 80005a2:	e014      	b.n	80005ce <api_wifi_connect+0x56>
	}

	HAL_Delay(20);
 80005a4:	2014      	movs	r0, #20
 80005a6:	f001 f84b 	bl	8001640 <HAL_Delay>
	if( api_wifi_scan() ){
 80005aa:	f000 f87b 	bl	80006a4 <api_wifi_scan>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <api_wifi_connect+0x40>
		return FAIL;
 80005b4:	2301      	movs	r3, #1
 80005b6:	e00a      	b.n	80005ce <api_wifi_connect+0x56>
	}

	HAL_Delay(20);
 80005b8:	2014      	movs	r0, #20
 80005ba:	f001 f841 	bl	8001640 <HAL_Delay>
	if( api_wifi_known() ){
 80005be:	f000 f935 	bl	800082c <api_wifi_known>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <api_wifi_connect+0x54>
		return FAIL;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e000      	b.n	80005ce <api_wifi_connect+0x56>
	}

	return PASS;
 80005cc:	2300      	movs	r3, #0
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	bd80      	pop	{r7, pc}
	...

080005d4 <api_wifi_ping>:
/*! @Function Name: api_wifi_ping
 *  @brief        : High level function to ping to google.com
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_ping(void){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 80005d8:	2014      	movs	r0, #20
 80005da:	f001 f831 	bl	8001640 <HAL_Delay>
	LOG_BOX("SEND: Ping to www.google.com");
 80005de:	4813      	ldr	r0, [pc, #76]	; (800062c <api_wifi_ping+0x58>)
 80005e0:	f000 faac 	bl	8000b3c <LOG_BOX>
	uart_tx(AT_ping, strlen(AT_ping), WIFI_UART);
 80005e4:	4812      	ldr	r0, [pc, #72]	; (8000630 <api_wifi_ping+0x5c>)
 80005e6:	f7ff fdf3 	bl	80001d0 <strlen>
 80005ea:	4603      	mov	r3, r0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <api_wifi_ping+0x60>)
 80005f0:	4619      	mov	r1, r3
 80005f2:	480f      	ldr	r0, [pc, #60]	; (8000630 <api_wifi_ping+0x5c>)
 80005f4:	f000 f9b2 	bl	800095c <uart_tx>

	if( uart_rx_check(Resp_WIFI_SUCCESS, strlen(Resp_WIFI_SUCCESS), 10 * UART_1S_TIMEOUT) ){
 80005f8:	480f      	ldr	r0, [pc, #60]	; (8000638 <api_wifi_ping+0x64>)
 80005fa:	f7ff fde9 	bl	80001d0 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b2db      	uxtb	r3, r3
 8000602:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000606:	4619      	mov	r1, r3
 8000608:	480b      	ldr	r0, [pc, #44]	; (8000638 <api_wifi_ping+0x64>)
 800060a:	f000 fa13 	bl	8000a34 <uart_rx_check>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d006      	beq.n	8000622 <api_wifi_ping+0x4e>
		LOG("ERROR: Packets returned unsuccessfully.\r\n");
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <api_wifi_ping+0x68>)
 8000616:	f000 fa6b 	bl	8000af0 <LOG>
		uart_rx_print();
 800061a:	f000 f9c1 	bl	80009a0 <uart_rx_print>
		return FAIL;
 800061e:	2301      	movs	r3, #1
 8000620:	e002      	b.n	8000628 <api_wifi_ping+0x54>
	}

	uart_rx_print();
 8000622:	f000 f9bd 	bl	80009a0 <uart_rx_print>
	return PASS;
 8000626:	2300      	movs	r3, #0

}
 8000628:	4618      	mov	r0, r3
 800062a:	bd80      	pop	{r7, pc}
 800062c:	08004cd4 	.word	0x08004cd4
 8000630:	20000044 	.word	0x20000044
 8000634:	40013800 	.word	0x40013800
 8000638:	2000006c 	.word	0x2000006c
 800063c:	08004cf4 	.word	0x08004cf4

08000640 <api_wifi_station>:
 *  @brief        : Station mode command of USART Wi-Fi module. This command
 *  				sets Wi-Fi module in Station mode.
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_station(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

	LOG_BOX("SEND: Setting to station mode");
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <api_wifi_station+0x50>)
 8000646:	f000 fa79 	bl	8000b3c <LOG_BOX>
	uart_tx(AT_station, strlen(AT_station), WIFI_UART);
 800064a:	4812      	ldr	r0, [pc, #72]	; (8000694 <api_wifi_station+0x54>)
 800064c:	f7ff fdc0 	bl	80001d0 <strlen>
 8000650:	4603      	mov	r3, r0
 8000652:	b2db      	uxtb	r3, r3
 8000654:	4a10      	ldr	r2, [pc, #64]	; (8000698 <api_wifi_station+0x58>)
 8000656:	4619      	mov	r1, r3
 8000658:	480e      	ldr	r0, [pc, #56]	; (8000694 <api_wifi_station+0x54>)
 800065a:	f000 f97f 	bl	800095c <uart_tx>

	if( uart_rx_check(Resp_WIFI_OK, strlen(Resp_WIFI_OK), UART_1S_TIMEOUT) ){
 800065e:	480f      	ldr	r0, [pc, #60]	; (800069c <api_wifi_station+0x5c>)
 8000660:	f7ff fdb6 	bl	80001d0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	2232      	movs	r2, #50	; 0x32
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <api_wifi_station+0x5c>)
 800066e:	f000 f9e1 	bl	8000a34 <uart_rx_check>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d006      	beq.n	8000686 <api_wifi_station+0x46>
		LOG("ERROR: No response.\r\n");
 8000678:	4809      	ldr	r0, [pc, #36]	; (80006a0 <api_wifi_station+0x60>)
 800067a:	f000 fa39 	bl	8000af0 <LOG>
		uart_rx_print();
 800067e:	f000 f98f 	bl	80009a0 <uart_rx_print>
		return FAIL;
 8000682:	2301      	movs	r3, #1
 8000684:	e002      	b.n	800068c <api_wifi_station+0x4c>
	}

	uart_rx_print();
 8000686:	f000 f98b 	bl	80009a0 <uart_rx_print>
	return PASS;
 800068a:	2300      	movs	r3, #0
}
 800068c:	4618      	mov	r0, r3
 800068e:	bd80      	pop	{r7, pc}
 8000690:	08004d20 	.word	0x08004d20
 8000694:	20000008 	.word	0x20000008
 8000698:	40013800 	.word	0x40013800
 800069c:	20000064 	.word	0x20000064
 80006a0:	08004d40 	.word	0x08004d40

080006a4 <api_wifi_scan>:
 *  				scans for nearby AP and parses for known AP RSSI values.
 *  				This function should be called before WM_KnownConnect.
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_scan(void){
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0

	LOG_BOX("SEND: Scanning nearby APs");
 80006a8:	481d      	ldr	r0, [pc, #116]	; (8000720 <api_wifi_scan+0x7c>)
 80006aa:	f000 fa47 	bl	8000b3c <LOG_BOX>
	uart_tx(AT_scan, strlen(AT_scan), WIFI_UART);
 80006ae:	481d      	ldr	r0, [pc, #116]	; (8000724 <api_wifi_scan+0x80>)
 80006b0:	f7ff fd8e 	bl	80001d0 <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	4a1b      	ldr	r2, [pc, #108]	; (8000728 <api_wifi_scan+0x84>)
 80006ba:	4619      	mov	r1, r3
 80006bc:	4819      	ldr	r0, [pc, #100]	; (8000724 <api_wifi_scan+0x80>)
 80006be:	f000 f94d 	bl	800095c <uart_tx>

	HAL_Delay(3000);
 80006c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006c6:	f000 ffbb 	bl	8001640 <HAL_Delay>

	if( uart_rx_check(Resp_WIFI_OK, strlen(Resp_WIFI_OK), 20 * UART_1S_TIMEOUT) ){
 80006ca:	4818      	ldr	r0, [pc, #96]	; (800072c <api_wifi_scan+0x88>)
 80006cc:	f7ff fd80 	bl	80001d0 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006d8:	4619      	mov	r1, r3
 80006da:	4814      	ldr	r0, [pc, #80]	; (800072c <api_wifi_scan+0x88>)
 80006dc:	f000 f9aa 	bl	8000a34 <uart_rx_check>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d006      	beq.n	80006f4 <api_wifi_scan+0x50>
		LOG("ERROR: No response.\r\n");
 80006e6:	4812      	ldr	r0, [pc, #72]	; (8000730 <api_wifi_scan+0x8c>)
 80006e8:	f000 fa02 	bl	8000af0 <LOG>
		uart_rx_print();
 80006ec:	f000 f958 	bl	80009a0 <uart_rx_print>
		return FAIL;
 80006f0:	2301      	movs	r3, #1
 80006f2:	e013      	b.n	800071c <api_wifi_scan+0x78>
	}

	uart_rx_print();
 80006f4:	f000 f954 	bl	80009a0 <uart_rx_print>

	if( api_wifi_scanparse() ){
 80006f8:	f000 f820 	bl	800073c <api_wifi_scanparse>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d006      	beq.n	8000710 <api_wifi_scan+0x6c>
		LOG("ERROR: Known AP(s) not found.\r\n");
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <api_wifi_scan+0x90>)
 8000704:	f000 f9f4 	bl	8000af0 <LOG>
		uart_rx_print();
 8000708:	f000 f94a 	bl	80009a0 <uart_rx_print>
		return FAIL;
 800070c:	2301      	movs	r3, #1
 800070e:	e005      	b.n	800071c <api_wifi_scan+0x78>
	}else{
		LOG("Known AP(s) found.\r\n");
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <api_wifi_scan+0x94>)
 8000712:	f000 f9ed 	bl	8000af0 <LOG>
		uart_rx_print();
 8000716:	f000 f943 	bl	80009a0 <uart_rx_print>
		return PASS;
 800071a:	2300      	movs	r3, #0
	}

}
 800071c:	4618      	mov	r0, r3
 800071e:	bd80      	pop	{r7, pc}
 8000720:	08004d58 	.word	0x08004d58
 8000724:	20000014 	.word	0x20000014
 8000728:	40013800 	.word	0x40013800
 800072c:	20000064 	.word	0x20000064
 8000730:	08004d40 	.word	0x08004d40
 8000734:	08004d74 	.word	0x08004d74
 8000738:	08004d94 	.word	0x08004d94

0800073c <api_wifi_scanparse>:
 *  				AP RSSI values.
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_scanparse(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

	char Status = FAIL;
 8000742:	2301      	movs	r3, #1
 8000744:	75fb      	strb	r3, [r7, #23]
	char *str = NULL;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
	const char s[2] = ",";
 800074a:	232c      	movs	r3, #44	; 0x2c
 800074c:	80bb      	strh	r3, [r7, #4]
	char *token;
	uint8_t i = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	73fb      	strb	r3, [r7, #15]

	str = rx_buff;
 8000752:	4b33      	ldr	r3, [pc, #204]	; (8000820 <api_wifi_scanparse+0xe4>)
 8000754:	60bb      	str	r3, [r7, #8]

	token = strtok(str, s);
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4619      	mov	r1, r3
 800075a:	68b8      	ldr	r0, [r7, #8]
 800075c:	f003 fa02 	bl	8003b64 <strtok>
 8000760:	6138      	str	r0, [r7, #16]

	// get RSSI of known AP
	while(token != NULL) {
 8000762:	e038      	b.n	80007d6 <api_wifi_scanparse+0x9a>

		// if token is an SSID
		if(*token == '\"') {
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	2b22      	cmp	r3, #34	; 0x22
 800076a:	d12e      	bne.n	80007ca <api_wifi_scanparse+0x8e>

			// check if SSID is in known AP list
			for(i = 0; i < AP_KNOWN_COUNT; i++) {
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
 8000770:	e028      	b.n	80007c4 <api_wifi_scanparse+0x88>

				// nonzero if SSID match
				if(strstr(token, AP_List_Known[i]->SSID)) {
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <api_wifi_scanparse+0xe8>)
 8000776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800077a:	4619      	mov	r1, r3
 800077c:	6938      	ldr	r0, [r7, #16]
 800077e:	f003 f9d9 	bl	8003b34 <strstr>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d01a      	beq.n	80007be <api_wifi_scanparse+0x82>

					// go to RSSI value
					while (*token != '-') {
 8000788:	e005      	b.n	8000796 <api_wifi_scanparse+0x5a>
						token = strtok(NULL, s);
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4619      	mov	r1, r3
 800078e:	2000      	movs	r0, #0
 8000790:	f003 f9e8 	bl	8003b64 <strtok>
 8000794:	6138      	str	r0, [r7, #16]
					while (*token != '-') {
 8000796:	693b      	ldr	r3, [r7, #16]
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b2d      	cmp	r3, #45	; 0x2d
 800079c:	d1f5      	bne.n	800078a <api_wifi_scanparse+0x4e>
					}
					// store RSSI value
					token++;
 800079e:	693b      	ldr	r3, [r7, #16]
 80007a0:	3301      	adds	r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
					AP_List_Known[i]->RSSI = atoi(token);
 80007a4:	6938      	ldr	r0, [r7, #16]
 80007a6:	f003 f98e 	bl	8003ac6 <atoi>
 80007aa:	4601      	mov	r1, r0
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <api_wifi_scanparse+0xe8>)
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	b2ca      	uxtb	r2, r1
 80007b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					Status = PASS;	// Known AP found
 80007ba:	2300      	movs	r3, #0
 80007bc:	75fb      	strb	r3, [r7, #23]
			for(i = 0; i < AP_KNOWN_COUNT; i++) {
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	3301      	adds	r3, #1
 80007c2:	73fb      	strb	r3, [r7, #15]
 80007c4:	7bfb      	ldrb	r3, [r7, #15]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d9d3      	bls.n	8000772 <api_wifi_scanparse+0x36>
				}
			}
		}

		// move to next token
		token = strtok(NULL, s);
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	2000      	movs	r0, #0
 80007d0:	f003 f9c8 	bl	8003b64 <strtok>
 80007d4:	6138      	str	r0, [r7, #16]
	while(token != NULL) {
 80007d6:	693b      	ldr	r3, [r7, #16]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d1c3      	bne.n	8000764 <api_wifi_scanparse+0x28>
	}

    // get index of strongest AP
    for (i = 1; i < AP_KNOWN_COUNT; i++) {
 80007dc:	2301      	movs	r3, #1
 80007de:	73fb      	strb	r3, [r7, #15]
 80007e0:	e015      	b.n	800080e <api_wifi_scanparse+0xd2>

        if (AP_List_Known[strAP_idx]->RSSI > AP_List_Known[i]->RSSI) {
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <api_wifi_scanparse+0xec>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <api_wifi_scanparse+0xe8>)
 80007ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ee:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	490b      	ldr	r1, [pc, #44]	; (8000824 <api_wifi_scanparse+0xe8>)
 80007f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80007fe:	429a      	cmp	r2, r3
 8000800:	d902      	bls.n	8000808 <api_wifi_scanparse+0xcc>
            strAP_idx = i;
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <api_wifi_scanparse+0xec>)
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	7013      	strb	r3, [r2, #0]
    for (i = 1; i < AP_KNOWN_COUNT; i++) {
 8000808:	7bfb      	ldrb	r3, [r7, #15]
 800080a:	3301      	adds	r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	2b02      	cmp	r3, #2
 8000812:	d9e6      	bls.n	80007e2 <api_wifi_scanparse+0xa6>
        }

    }

	return Status;
 8000814:	7dfb      	ldrb	r3, [r7, #23]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200001ec 	.word	0x200001ec
 8000824:	20000140 	.word	0x20000140
 8000828:	200001d8 	.word	0x200001d8

0800082c <api_wifi_known>:
 *  @brief        : Known AP connect command of USART Wi-Fi module. This command
 *  				connects to strongest known AP.
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_known(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0

	LOG_BOX("SEND: Connecting to known AP");
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <api_wifi_known+0x54>)
 8000832:	f000 f983 	bl	8000b3c <LOG_BOX>
	uart_tx(AT_connect, strlen(AT_connect), WIFI_UART);
 8000836:	4813      	ldr	r0, [pc, #76]	; (8000884 <api_wifi_known+0x58>)
 8000838:	f7ff fcca 	bl	80001d0 <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4a11      	ldr	r2, [pc, #68]	; (8000888 <api_wifi_known+0x5c>)
 8000842:	4619      	mov	r1, r3
 8000844:	480f      	ldr	r0, [pc, #60]	; (8000884 <api_wifi_known+0x58>)
 8000846:	f000 f889 	bl	800095c <uart_tx>

	if( uart_rx_check(Resp_WIFI_OK, strlen(Resp_WIFI_OK), 6 * UART_1S_TIMEOUT) ){
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <api_wifi_known+0x60>)
 800084c:	f7ff fcc0 	bl	80001d0 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b2db      	uxtb	r3, r3
 8000854:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000858:	4619      	mov	r1, r3
 800085a:	480c      	ldr	r0, [pc, #48]	; (800088c <api_wifi_known+0x60>)
 800085c:	f000 f8ea 	bl	8000a34 <uart_rx_check>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d006      	beq.n	8000874 <api_wifi_known+0x48>
		LOG("ERROR: Wi-Fi connection may already be established.\r\n");
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <api_wifi_known+0x64>)
 8000868:	f000 f942 	bl	8000af0 <LOG>
		uart_rx_print();
 800086c:	f000 f898 	bl	80009a0 <uart_rx_print>
		return FAIL;
 8000870:	2301      	movs	r3, #1
 8000872:	e002      	b.n	800087a <api_wifi_known+0x4e>
	}

	uart_rx_print();
 8000874:	f000 f894 	bl	80009a0 <uart_rx_print>
	return PASS;
 8000878:	2300      	movs	r3, #0
}
 800087a:	4618      	mov	r0, r3
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	08004dac 	.word	0x08004dac
 8000884:	20000020 	.word	0x20000020
 8000888:	40013800 	.word	0x40013800
 800088c:	20000064 	.word	0x20000064
 8000890:	08004dcc 	.word	0x08004dcc

08000894 <api_wifi_echodisable>:
/*! @Function Name: api_wifi_station
 *  @brief        : Echo disable command of USART Wi-Fi module.
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_echodisable(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	LOG_BOX("SEND: Disabling echo");
 8000898:	4812      	ldr	r0, [pc, #72]	; (80008e4 <api_wifi_echodisable+0x50>)
 800089a:	f000 f94f 	bl	8000b3c <LOG_BOX>
	uart_tx(AT_echodisable, strlen(AT_echodisable), WIFI_UART);
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <api_wifi_echodisable+0x54>)
 80008a0:	f7ff fc96 	bl	80001d0 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	4a10      	ldr	r2, [pc, #64]	; (80008ec <api_wifi_echodisable+0x58>)
 80008aa:	4619      	mov	r1, r3
 80008ac:	480e      	ldr	r0, [pc, #56]	; (80008e8 <api_wifi_echodisable+0x54>)
 80008ae:	f000 f855 	bl	800095c <uart_tx>

	if( uart_rx_check(Resp_WIFI_OK, strlen(Resp_WIFI_OK), UART_1S_TIMEOUT) ){
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <api_wifi_echodisable+0x5c>)
 80008b4:	f7ff fc8c 	bl	80001d0 <strlen>
 80008b8:	4603      	mov	r3, r0
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2232      	movs	r2, #50	; 0x32
 80008be:	4619      	mov	r1, r3
 80008c0:	480b      	ldr	r0, [pc, #44]	; (80008f0 <api_wifi_echodisable+0x5c>)
 80008c2:	f000 f8b7 	bl	8000a34 <uart_rx_check>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d006      	beq.n	80008da <api_wifi_echodisable+0x46>
		LOG("ERROR: No response.\r\n");
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <api_wifi_echodisable+0x60>)
 80008ce:	f000 f90f 	bl	8000af0 <LOG>
		uart_rx_print();
 80008d2:	f000 f865 	bl	80009a0 <uart_rx_print>
		return FAIL;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e002      	b.n	80008e0 <api_wifi_echodisable+0x4c>
	}

	uart_rx_print();
 80008da:	f000 f861 	bl	80009a0 <uart_rx_print>
	return PASS;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	08004e04 	.word	0x08004e04
 80008e8:	2000005c 	.word	0x2000005c
 80008ec:	40013800 	.word	0x40013800
 80008f0:	20000064 	.word	0x20000064
 80008f4:	08004d40 	.word	0x08004d40

080008f8 <api_wifi_check>:
/*! @Function Name: api_wifi_check
 *  @brief        : Check for return response.
 *  @return       : pass or fail
 */
/*****************************************************************************/
char api_wifi_check(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0

	LOG_BOX("SEND: Checking response");
 80008fc:	4812      	ldr	r0, [pc, #72]	; (8000948 <api_wifi_check+0x50>)
 80008fe:	f000 f91d 	bl	8000b3c <LOG_BOX>
	uart_tx(AT_check, strlen(AT_check), WIFI_UART);
 8000902:	4812      	ldr	r0, [pc, #72]	; (800094c <api_wifi_check+0x54>)
 8000904:	f7ff fc64 	bl	80001d0 <strlen>
 8000908:	4603      	mov	r3, r0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4a10      	ldr	r2, [pc, #64]	; (8000950 <api_wifi_check+0x58>)
 800090e:	4619      	mov	r1, r3
 8000910:	480e      	ldr	r0, [pc, #56]	; (800094c <api_wifi_check+0x54>)
 8000912:	f000 f823 	bl	800095c <uart_tx>

	if( uart_rx_check(Resp_WIFI_OK, strlen(Resp_WIFI_OK), UART_1S_TIMEOUT) ){
 8000916:	480f      	ldr	r0, [pc, #60]	; (8000954 <api_wifi_check+0x5c>)
 8000918:	f7ff fc5a 	bl	80001d0 <strlen>
 800091c:	4603      	mov	r3, r0
 800091e:	b2db      	uxtb	r3, r3
 8000920:	2232      	movs	r2, #50	; 0x32
 8000922:	4619      	mov	r1, r3
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <api_wifi_check+0x5c>)
 8000926:	f000 f885 	bl	8000a34 <uart_rx_check>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <api_wifi_check+0x46>
		LOG("ERROR: No response.\r\n");
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <api_wifi_check+0x60>)
 8000932:	f000 f8dd 	bl	8000af0 <LOG>
		uart_rx_print();
 8000936:	f000 f833 	bl	80009a0 <uart_rx_print>
		return FAIL;
 800093a:	2301      	movs	r3, #1
 800093c:	e002      	b.n	8000944 <api_wifi_check+0x4c>
	}

	uart_rx_print();
 800093e:	f000 f82f 	bl	80009a0 <uart_rx_print>
	return PASS;
 8000942:	2300      	movs	r3, #0
}
 8000944:	4618      	mov	r0, r3
 8000946:	bd80      	pop	{r7, pc}
 8000948:	08004e1c 	.word	0x08004e1c
 800094c:	20000000 	.word	0x20000000
 8000950:	40013800 	.word	0x40013800
 8000954:	20000064 	.word	0x20000064
 8000958:	08004d40 	.word	0x08004d40

0800095c <uart_tx>:
/*! @fn       uart_tx
 *  @brief    Sends data to the USART3 data buffer
 *  @param    Pointer to the data to be sent
 */
/*****************************************************************************/
void uart_tx(char* cmd, uint8_t cmd_length, USART_TypeDef *uart){
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	460b      	mov	r3, r1
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	72fb      	strb	r3, [r7, #11]

	uart_rx_flush();	// Reset
 800096a:	f000 f843 	bl	80009f4 <uart_rx_flush>

	uart_t.ptr = cmd;			// Load new command
 800096e:	4a0b      	ldr	r2, [pc, #44]	; (800099c <uart_tx+0x40>)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	6053      	str	r3, [r2, #4]
	uart_t.count = cmd_length;  // and command length
 8000974:	7afb      	ldrb	r3, [r7, #11]
 8000976:	b29a      	uxth	r2, r3
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <uart_tx+0x40>)
 800097a:	801a      	strh	r2, [r3, #0]
	uart->TDR = *uart_t.ptr & 0xFF; // Writing to TDR clears TX
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <uart_tx+0x40>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b29a      	uxth	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	851a      	strh	r2, [r3, #40]	; 0x28

	uart->CR1 |= USART_CR1_TXEIE; // Initiate USART Tx interrupt
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200025ec 	.word	0x200025ec

080009a0 <uart_rx_print>:
/*! @fn       uart_rx_print
 *  @brief    Print uart response buffer to PC for debug purposes.
 *  @return   ret -  0 for success and -1 for failure
 */
/*****************************************************************************/
char uart_rx_print(void){
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0

	uint16_t i;

	for(i = 0; i < rx_idx; i++){
 80009a6:	2300      	movs	r3, #0
 80009a8:	80fb      	strh	r3, [r7, #6]
 80009aa:	e00f      	b.n	80009cc <uart_rx_print+0x2c>
		while(!(PC_UART->ISR & USART_ISR_TXE));	// Wait until hardware sets TXE
 80009ac:	bf00      	nop
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <uart_rx_print+0x48>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f9      	beq.n	80009ae <uart_rx_print+0xe>
		PC_UART->TDR = rx_buff[i] & 0xFF;		// Writing to TDR clears TXE flag
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	4a0b      	ldr	r2, [pc, #44]	; (80009ec <uart_rx_print+0x4c>)
 80009be:	5cd2      	ldrb	r2, [r2, r3]
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <uart_rx_print+0x48>)
 80009c2:	b292      	uxth	r2, r2
 80009c4:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i = 0; i < rx_idx; i++){
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	3301      	adds	r3, #1
 80009ca:	80fb      	strh	r3, [r7, #6]
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <uart_rx_print+0x50>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	88fa      	ldrh	r2, [r7, #6]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d3e9      	bcc.n	80009ac <uart_rx_print+0xc>
	}

	//while(! (PC_UART->ISR & USART_ISR_TC));	// Wait until TC: transmission complete

	//PC_UART->ICR |= USART_ICR_TCCF;			// Clear TCCF: transmission complete clear flag
}
 80009d8:	bf00      	nop
 80009da:	4618      	mov	r0, r3
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40004400 	.word	0x40004400
 80009ec:	200001ec 	.word	0x200001ec
 80009f0:	200001e8 	.word	0x200001e8

080009f4 <uart_rx_flush>:
/*****************************************************************************/
/*! @fn       uart_rx_flush
 *  @brief    Resets uart receive buffer and index
 */
/*****************************************************************************/
void uart_rx_flush(void){
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0

	uint16_t i;

	for(i = 0; i < rx_idx; i++){
 80009fa:	2300      	movs	r3, #0
 80009fc:	80fb      	strh	r3, [r7, #6]
 80009fe:	e006      	b.n	8000a0e <uart_rx_flush+0x1a>
		rx_buff[i] = NULL;
 8000a00:	88fb      	ldrh	r3, [r7, #6]
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <uart_rx_flush+0x38>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < rx_idx; i++){
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	80fb      	strh	r3, [r7, #6]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <uart_rx_flush+0x3c>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	88fa      	ldrh	r2, [r7, #6]
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d3f2      	bcc.n	8000a00 <uart_rx_flush+0xc>
	}

	rx_idx = BUFF_RESET;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <uart_rx_flush+0x3c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	801a      	strh	r2, [r3, #0]
}
 8000a20:	bf00      	nop
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	200001ec 	.word	0x200001ec
 8000a30:	200001e8 	.word	0x200001e8

08000a34 <uart_rx_check>:
 *   @param    needle to scanned for in rx_buff, size of needle,
 *   		   times to call UART_Rx_Find
 *  @return    ret -  0 for success and 1 for failure
 */
/*****************************************************************************/
uint8_t uart_rx_check(char* needle, uint8_t needle_size, uint16_t test_cnt){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
 8000a40:	4613      	mov	r3, r2
 8000a42:	803b      	strh	r3, [r7, #0]

	while(test_cnt)
 8000a44:	e00f      	b.n	8000a66 <uart_rx_check+0x32>
	{
		HAL_Delay(UART_DELAY);
 8000a46:	2014      	movs	r0, #20
 8000a48:	f000 fdfa 	bl	8001640 <HAL_Delay>

		if( uart_rx_find(needle, needle_size) )
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	6878      	ldr	r0, [r7, #4]
 8000a52:	f000 f811 	bl	8000a78 <uart_rx_find>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <uart_rx_check+0x2c>
		{
			return PASS;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	e006      	b.n	8000a6e <uart_rx_check+0x3a>
		}

		test_cnt--;
 8000a60:	883b      	ldrh	r3, [r7, #0]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	803b      	strh	r3, [r7, #0]
	while(test_cnt)
 8000a66:	883b      	ldrh	r3, [r7, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d1ec      	bne.n	8000a46 <uart_rx_check+0x12>

	}

	return FAIL;
 8000a6c:	2301      	movs	r3, #1

}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <uart_rx_find>:
 *  @brief        : This function finds needle inside rx_buffer.
 *  @return		  : index to end of needle, used for rx_idx
 *  				else 0
 */
/*****************************************************************************/
uint16_t uart_rx_find(char* needle, uint8_t needle_size){	// return index to end of needle, else 0
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	460b      	mov	r3, r1
 8000a82:	70fb      	strb	r3, [r7, #3]

	uint16_t i = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	81fb      	strh	r3, [r7, #14]
	uint16_t buff_idx = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	81bb      	strh	r3, [r7, #12]

	while (buff_idx <= rx_idx) {
 8000a8c:	e01f      	b.n	8000ace <uart_rx_find+0x56>

		// check for complete needle
		while (needle[i] == rx_buff[buff_idx] && i < needle_size) {
			i++;
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	3301      	adds	r3, #1
 8000a92:	81fb      	strh	r3, [r7, #14]
			buff_idx++;
 8000a94:	89bb      	ldrh	r3, [r7, #12]
 8000a96:	3301      	adds	r3, #1
 8000a98:	81bb      	strh	r3, [r7, #12]
		while (needle[i] == rx_buff[buff_idx] && i < needle_size) {
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781a      	ldrb	r2, [r3, #0]
 8000aa2:	89bb      	ldrh	r3, [r7, #12]
 8000aa4:	4910      	ldr	r1, [pc, #64]	; (8000ae8 <uart_rx_find+0x70>)
 8000aa6:	5ccb      	ldrb	r3, [r1, r3]
 8000aa8:	429a      	cmp	r2, r3
 8000aaa:	d104      	bne.n	8000ab6 <uart_rx_find+0x3e>
 8000aac:	78fb      	ldrb	r3, [r7, #3]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	89fa      	ldrh	r2, [r7, #14]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d3eb      	bcc.n	8000a8e <uart_rx_find+0x16>
		}

		if (i == needle_size) {
 8000ab6:	78fb      	ldrb	r3, [r7, #3]
 8000ab8:	b29b      	uxth	r3, r3
 8000aba:	89fa      	ldrh	r2, [r7, #14]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d101      	bne.n	8000ac4 <uart_rx_find+0x4c>
			return buff_idx; // needle found
 8000ac0:	89bb      	ldrh	r3, [r7, #12]
 8000ac2:	e00b      	b.n	8000adc <uart_rx_find+0x64>
		}

		i = 0; // reset needle index
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	81fb      	strh	r3, [r7, #14]
		buff_idx++;
 8000ac8:	89bb      	ldrh	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	81bb      	strh	r3, [r7, #12]
	while (buff_idx <= rx_idx) {
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <uart_rx_find+0x74>)
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	89ba      	ldrh	r2, [r7, #12]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	d9df      	bls.n	8000a9a <uart_rx_find+0x22>

	}

	return 0; // needle not found
 8000ada:	2300      	movs	r3, #0

}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	200001ec 	.word	0x200001ec
 8000aec:	200001e8 	.word	0x200001e8

08000af0 <LOG>:
/*! @fn       LOG
 *  @brief    Log message to PC
 *  @param    Pointer to the data to be sent
 */
/*****************************************************************************/
char LOG(char* message){
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

	uint16_t i;

	for(i = 0; i < strlen(message) ; i++){
 8000af8:	2300      	movs	r3, #0
 8000afa:	81fb      	strh	r3, [r7, #14]
 8000afc:	e010      	b.n	8000b20 <LOG+0x30>
		while(!(PC_UART->ISR & USART_ISR_TXE));	// Wait until hardware sets TXE
 8000afe:	bf00      	nop
 8000b00:	4b0d      	ldr	r3, [pc, #52]	; (8000b38 <LOG+0x48>)
 8000b02:	69db      	ldr	r3, [r3, #28]
 8000b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d0f9      	beq.n	8000b00 <LOG+0x10>
		PC_UART->TDR = message[i] & 0xFF;		// Writing to TDR clears TXE flag
 8000b0c:	89fb      	ldrh	r3, [r7, #14]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <LOG+0x48>)
 8000b16:	b292      	uxth	r2, r2
 8000b18:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i = 0; i < strlen(message) ; i++){
 8000b1a:	89fb      	ldrh	r3, [r7, #14]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	81fb      	strh	r3, [r7, #14]
 8000b20:	89fc      	ldrh	r4, [r7, #14]
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f7ff fb54 	bl	80001d0 <strlen>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	429c      	cmp	r4, r3
 8000b2c:	d3e7      	bcc.n	8000afe <LOG+0xe>
#if 0
	while(! (PC_UART->ISR & USART_ISR_TC));	// Wait until TC: transmission complete

	PC_UART->ICR |= USART_ICR_TCCF;			// Clear TCCF: transmission complete clear flag
#endif
}
 8000b2e:	bf00      	nop
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	40004400 	.word	0x40004400

08000b3c <LOG_BOX>:
 *  @brief    Log message to PC between two rows of asterisks.
 *  @param    Pointer to the data to be sent
 */
/*****************************************************************************/
void LOG_BOX(char* message)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	LOG("\r\n************************************************\r\n");
 8000b44:	4806      	ldr	r0, [pc, #24]	; (8000b60 <LOG_BOX+0x24>)
 8000b46:	f7ff ffd3 	bl	8000af0 <LOG>
	LOG(message);
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f7ff ffd0 	bl	8000af0 <LOG>
	LOG("\r\n************************************************\r\n");
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <LOG_BOX+0x24>)
 8000b52:	f7ff ffcd 	bl	8000af0 <LOG>
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08004e34 	.word	0x08004e34

08000b64 <uart_isr>:
/*****************************************************************************/
/*! @Function Name: uart_isr
 *  @brief        : Handles generic USART global interrupt request
 */
/*****************************************************************************/
void uart_isr(USART_TypeDef *uart){
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]

	// if receive buffer ready to read
	if( uart->ISR & USART_ISR_RXNE ){ // Check RXNE event
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	f003 0320 	and.w	r3, r3, #32
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d019      	beq.n	8000bac <uart_isr+0x48>
		rx_buff[rx_idx] = uart->RDR;  // Reading RDR clears RXNE flag
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <uart_isr+0xa8>)
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	b2c9      	uxtb	r1, r1
 8000b88:	4b21      	ldr	r3, [pc, #132]	; (8000c10 <uart_isr+0xac>)
 8000b8a:	5499      	strb	r1, [r3, r2]
		rx_idx++;					  // Update buffer index
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <uart_isr+0xa8>)
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	3301      	adds	r3, #1
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <uart_isr+0xa8>)
 8000b98:	801a      	strh	r2, [r3, #0]
		if(rx_idx >= BUFF_MAX){		  // Circular buffer
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <uart_isr+0xa8>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000ba4:	d302      	bcc.n	8000bac <uart_isr+0x48>
			rx_idx = BUFF_RESET;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <uart_isr+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	801a      	strh	r2, [r3, #0]
		}
	}

	// if ready to transfer
	if( uart->ISR & USART_ISR_TC ){		// Check TXE event
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69db      	ldr	r3, [r3, #28]
 8000bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d023      	beq.n	8000c00 <uart_isr+0x9c>
		if(uart_t.count > 0){				// Transmit next byte
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <uart_isr+0xb0>)
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d012      	beq.n	8000be8 <uart_isr+0x84>
			uart_t.ptr++;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <uart_isr+0xb0>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <uart_isr+0xb0>)
 8000bca:	6053      	str	r3, [r2, #4]
			uart_t.count--;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <uart_isr+0xb0>)
 8000bce:	881b      	ldrh	r3, [r3, #0]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <uart_isr+0xb0>)
 8000bd8:	801a      	strh	r2, [r3, #0]
			uart->TDR = *uart_t.ptr & 0xFF; // Writing to TDR clears TC
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <uart_isr+0xb0>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	851a      	strh	r2, [r3, #40]	; 0x28
			uart->CR1 &= ~USART_CR1_TXEIE;	// Disable TXE interrupt
			uart->ICR |= USART_ICR_TCCF;
		}
	}

}
 8000be6:	e00b      	b.n	8000c00 <uart_isr+0x9c>
			uart->CR1 &= ~USART_CR1_TXEIE;	// Disable TXE interrupt
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	601a      	str	r2, [r3, #0]
			uart->ICR |= USART_ICR_TCCF;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6a1b      	ldr	r3, [r3, #32]
 8000bf8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	621a      	str	r2, [r3, #32]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	200001e8 	.word	0x200001e8
 8000c10:	200001ec 	.word	0x200001ec
 8000c14:	200025ec 	.word	0x200025ec

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1c:	f000 fc94 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c20:	f000 f826 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c24:	f000 f992 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c28:	f000 f91a 	bl	8000e60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c2c:	f000 f950 	bl	8000ed0 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8000c30:	f000 f8d8 	bl	8000de4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000c34:	f000 f898 	bl	8000d68 <MX_UART4_Init>
		api_ltegps_lteping();
		HAL_Delay(1000);
#endif

#if 1
		api_wifi_check();
 8000c38:	f7ff fe5e 	bl	80008f8 <api_wifi_check>
		HAL_Delay(1000);
 8000c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c40:	f000 fcfe 	bl	8001640 <HAL_Delay>
		api_wifi_check();
 8000c44:	f7ff fe58 	bl	80008f8 <api_wifi_check>
		HAL_Delay(1000);
 8000c48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c4c:	f000 fcf8 	bl	8001640 <HAL_Delay>
		api_wifi_check();
 8000c50:	f7ff fe52 	bl	80008f8 <api_wifi_check>
		HAL_Delay(1000);
 8000c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c58:	f000 fcf2 	bl	8001640 <HAL_Delay>
		api_wifi_connect();
 8000c5c:	f7ff fc8c 	bl	8000578 <api_wifi_connect>
		HAL_Delay(1000);
 8000c60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c64:	f000 fcec 	bl	8001640 <HAL_Delay>
		api_wifi_ping();
 8000c68:	f7ff fcb4 	bl	80005d4 <api_wifi_ping>
		__NOP();
 8000c6c:	bf00      	nop
		api_wifi_check();
 8000c6e:	e7e3      	b.n	8000c38 <main+0x20>

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b0b8      	sub	sp, #224	; 0xe0
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c7a:	2244      	movs	r2, #68	; 0x44
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 ff50 	bl	8003b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	2288      	movs	r2, #136	; 0x88
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 ff42 	bl	8003b24 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000caa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cae:	2310      	movs	r3, #16
 8000cb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ccc:	2307      	movs	r3, #7
 8000cce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 f808 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cee:	f000 f995 	bl	800101c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2303      	movs	r3, #3
 8000cfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d10:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d14:	2104      	movs	r1, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f001 fbd4 	bl	80024c4 <HAL_RCC_ClockConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000d22:	f000 f97b 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d26:	230f      	movs	r3, #15
 8000d28:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 fdc7 	bl	80028d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000d48:	f000 f968 	bl	800101c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d50:	f000 ff7c 	bl	8001c4c <HAL_PWREx_ControlVoltageScaling>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000d5a:	f000 f95f 	bl	800101c <Error_Handler>
  }
}
 8000d5e:	bf00      	nop
 8000d60:	37e0      	adds	r7, #224	; 0xe0
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_UART4_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_UART4_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_UART4_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_UART4_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000daa:	480c      	ldr	r0, [pc, #48]	; (8000ddc <MX_UART4_Init+0x74>)
 8000dac:	f002 fa4c 	bl	8003248 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000db6:	f000 f931 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  UART4->CR1 |= USART_CR1_RXNEIE; // Enable RXNE interrupt
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <MX_UART4_Init+0x78>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <MX_UART4_Init+0x78>)
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	6013      	str	r3, [r2, #0]
  UART4->RQR |= USART_RQR_RXFRQ;  // Clear RXNE flag
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <MX_UART4_Init+0x78>)
 8000dc8:	8b1b      	ldrh	r3, [r3, #24]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <MX_UART4_Init+0x78>)
 8000dce:	f043 0308 	orr.w	r3, r3, #8
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	8313      	strh	r3, [r2, #24]
  /* USER CODE END UART4_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	200026fc 	.word	0x200026fc
 8000de0:	40004c00 	.word	0x40004c00

08000de4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000dea:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <MX_USART1_UART_Init+0x78>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000df0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000df4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_USART1_UART_Init+0x74>)
 8000e28:	f002 fa0e 	bl	8003248 <HAL_UART_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e32:	f000 f8f3 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  USART1->CR1 |= USART_CR1_RXNEIE; // Enable RXNE interrupt
 8000e36:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <MX_USART1_UART_Init+0x78>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a08      	ldr	r2, [pc, #32]	; (8000e5c <MX_USART1_UART_Init+0x78>)
 8000e3c:	f043 0320 	orr.w	r3, r3, #32
 8000e40:	6013      	str	r3, [r2, #0]
  USART1->RQR |= USART_RQR_RXFRQ;  // Clear RXNE flag
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <MX_USART1_UART_Init+0x78>)
 8000e44:	8b1b      	ldrh	r3, [r3, #24]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <MX_USART1_UART_Init+0x78>)
 8000e4a:	f043 0308 	orr.w	r3, r3, #8
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	8313      	strh	r3, [r2, #24]
  /* USER CODE END USART1_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20002678 	.word	0x20002678
 8000e5c:	40013800 	.word	0x40013800

08000e60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e66:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <MX_USART2_UART_Init+0x6c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ea2:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <MX_USART2_UART_Init+0x68>)
 8000ea4:	f002 f9d0 	bl	8003248 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 f8b5 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  //USART2->CR1 |= USART_CR1_RXNEIE; // enable RX interrupt
  USART2->RQR |= USART_RQR_RXFRQ;  // Clear RXNE flag
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_USART2_UART_Init+0x6c>)
 8000eb4:	8b1b      	ldrh	r3, [r3, #24]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <MX_USART2_UART_Init+0x6c>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	8313      	strh	r3, [r2, #24]
  /* USER CODE END USART2_Init 2 */

}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20002780 	.word	0x20002780
 8000ecc:	40004400 	.word	0x40004400

08000ed0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000ed6:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <MX_USART3_UART_Init+0x78>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b13      	ldr	r3, [pc, #76]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f12:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MX_USART3_UART_Init+0x74>)
 8000f14:	f002 f998 	bl	8003248 <HAL_UART_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000f1e:	f000 f87d 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */
  USART3->CR1 |= USART_CR1_RXNEIE; // enable RX interrupt
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <MX_USART3_UART_Init+0x78>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <MX_USART3_UART_Init+0x78>)
 8000f28:	f043 0320 	orr.w	r3, r3, #32
 8000f2c:	6013      	str	r3, [r2, #0]
  USART3->RQR |= USART_RQR_RXFRQ;  // Clear RXNE flag
 8000f2e:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <MX_USART3_UART_Init+0x78>)
 8000f30:	8b1b      	ldrh	r3, [r3, #24]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <MX_USART3_UART_Init+0x78>)
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	8313      	strh	r3, [r2, #24]
  /* USER CODE END USART3_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200025f4 	.word	0x200025f4
 8000f48:	40004800 	.word	0x40004800

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b2b      	ldr	r3, [pc, #172]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f66:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b22      	ldr	r3, [pc, #136]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9e:	4b1c      	ldr	r3, [pc, #112]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b19      	ldr	r3, [pc, #100]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <MX_GPIO_Init+0xc4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f000 fe19 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <MX_GPIO_Init+0xc8>)
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_GPIO_Init+0xcc>)
 8000fe4:	f000 fc62 	bl	80018ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fe8:	2320      	movs	r3, #32
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f000 fc53 	bl	80018ac <HAL_GPIO_Init>

}
 8001006:	bf00      	nop
 8001008:	3728      	adds	r7, #40	; 0x28
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000
 8001014:	10210000 	.word	0x10210000
 8001018:	48000800 	.word	0x48000800

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_MspInit+0x44>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	4a0e      	ldr	r2, [pc, #56]	; (800106c <HAL_MspInit+0x44>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6613      	str	r3, [r2, #96]	; 0x60
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_MspInit+0x44>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x44>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x44>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x44>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b090      	sub	sp, #64	; 0x40
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a6e      	ldr	r2, [pc, #440]	; (8001248 <HAL_UART_MspInit+0x1d8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d131      	bne.n	80010f6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001092:	4b6e      	ldr	r3, [pc, #440]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a6d      	ldr	r2, [pc, #436]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001098:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b6b      	ldr	r3, [pc, #428]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b68      	ldr	r3, [pc, #416]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a67      	ldr	r2, [pc, #412]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b65      	ldr	r3, [pc, #404]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c2:	2303      	movs	r3, #3
 80010c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c6:	2302      	movs	r3, #2
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ce:	2303      	movs	r3, #3
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80010d2:	2308      	movs	r3, #8
 80010d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010da:	4619      	mov	r1, r3
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f000 fbe4 	bl	80018ac <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2034      	movs	r0, #52	; 0x34
 80010ea:	f000 fba8 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80010ee:	2034      	movs	r0, #52	; 0x34
 80010f0:	f000 fbc1 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010f4:	e0a3      	b.n	800123e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a55      	ldr	r2, [pc, #340]	; (8001250 <HAL_UART_MspInit+0x1e0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d132      	bne.n	8001166 <HAL_UART_MspInit+0xf6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001100:	4b52      	ldr	r3, [pc, #328]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001104:	4a51      	ldr	r2, [pc, #324]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001106:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800110a:	6613      	str	r3, [r2, #96]	; 0x60
 800110c:	4b4f      	ldr	r3, [pc, #316]	; (800124c <HAL_UART_MspInit+0x1dc>)
 800110e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001114:	623b      	str	r3, [r7, #32]
 8001116:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b4c      	ldr	r3, [pc, #304]	; (800124c <HAL_UART_MspInit+0x1dc>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111c:	4a4b      	ldr	r2, [pc, #300]	; (800124c <HAL_UART_MspInit+0x1dc>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001124:	4b49      	ldr	r3, [pc, #292]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001130:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001142:	2307      	movs	r3, #7
 8001144:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001150:	f000 fbac 	bl	80018ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2025      	movs	r0, #37	; 0x25
 800115a:	f000 fb70 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800115e:	2025      	movs	r0, #37	; 0x25
 8001160:	f000 fb89 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 8001164:	e06b      	b.n	800123e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <HAL_UART_MspInit+0x1e4>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d131      	bne.n	80011d4 <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001170:	4b36      	ldr	r3, [pc, #216]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001174:	4a35      	ldr	r2, [pc, #212]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117a:	6593      	str	r3, [r2, #88]	; 0x58
 800117c:	4b33      	ldr	r3, [pc, #204]	; (800124c <HAL_UART_MspInit+0x1dc>)
 800117e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	61bb      	str	r3, [r7, #24]
 8001186:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b30      	ldr	r3, [pc, #192]	; (800124c <HAL_UART_MspInit+0x1dc>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_UART_MspInit+0x1dc>)
 800118e:	f043 0301 	orr.w	r3, r3, #1
 8001192:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001196:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	617b      	str	r3, [r7, #20]
 800119e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011a0:	230c      	movs	r3, #12
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b0:	2307      	movs	r3, #7
 80011b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f000 fb75 	bl	80018ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2100      	movs	r1, #0
 80011c6:	2026      	movs	r0, #38	; 0x26
 80011c8:	f000 fb39 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011cc:	2026      	movs	r0, #38	; 0x26
 80011ce:	f000 fb52 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 80011d2:	e034      	b.n	800123e <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_UART_MspInit+0x1e8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d12f      	bne.n	800123e <HAL_UART_MspInit+0x1ce>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011de:	4b1b      	ldr	r3, [pc, #108]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a1a      	ldr	r2, [pc, #104]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80011e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a14      	ldr	r2, [pc, #80]	; (800124c <HAL_UART_MspInit+0x1dc>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_UART_MspInit+0x1dc>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800120e:	2330      	movs	r3, #48	; 0x30
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2303      	movs	r3, #3
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800121e:	2307      	movs	r3, #7
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001226:	4619      	mov	r1, r3
 8001228:	480c      	ldr	r0, [pc, #48]	; (800125c <HAL_UART_MspInit+0x1ec>)
 800122a:	f000 fb3f 	bl	80018ac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2027      	movs	r0, #39	; 0x27
 8001234:	f000 fb03 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001238:	2027      	movs	r0, #39	; 0x27
 800123a:	f000 fb1c 	bl	8001876 <HAL_NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3740      	adds	r7, #64	; 0x40
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40004c00 	.word	0x40004c00
 800124c:	40021000 	.word	0x40021000
 8001250:	40013800 	.word	0x40013800
 8001254:	40004400 	.word	0x40004400
 8001258:	40004800 	.word	0x40004800
 800125c:	48000800 	.word	0x48000800

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f000 f9a8 	bl	8001600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uart_isr(WIFI_UART);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <USART1_IRQHandler+0x10>)
 80012ba:	f7ff fc53 	bl	8000b64 <uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40013800 	.word	0x40013800

080012c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uart_isr(PC_UART);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <USART2_IRQHandler+0x10>)
 80012ce:	f7ff fc49 	bl	8000b64 <uart_isr>
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40004400 	.word	0x40004400

080012dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
  uart_isr(CAMERA_UART);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <USART3_IRQHandler+0x10>)
 80012e2:	f7ff fc3f 	bl	8000b64 <uart_isr>
  /* USER CODE END USART3_IRQn 0 */
  //HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40004800 	.word	0x40004800

080012f0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
   uart_isr(LTEGPS_UART);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <UART4_IRQHandler+0x10>)
 80012f6:	f7ff fc35 	bl	8000b64 <uart_isr>
  /* USER CODE END UART4_IRQn 0 */
  //HAL_UART_IRQHandler(&huart4);
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40004c00 	.word	0x40004c00

08001304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
	return 1;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_kill>:

int _kill(int pid, int sig)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800131e:	f002 fbd7 	bl	8003ad0 <__errno>
 8001322:	4603      	mov	r3, r0
 8001324:	2216      	movs	r2, #22
 8001326:	601a      	str	r2, [r3, #0]
	return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_exit>:

void _exit (int status)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800133c:	f04f 31ff 	mov.w	r1, #4294967295
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffe7 	bl	8001314 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001346:	e7fe      	b.n	8001346 <_exit+0x12>

08001348 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00a      	b.n	8001370 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4601      	mov	r1, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf0      	blt.n	800135a <_read+0x12>
	}

return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e009      	b.n	80013a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf1      	blt.n	8001394 <_write+0x12>
	}
	return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_close>:

int _close(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	605a      	str	r2, [r3, #4]
	return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_isatty>:

int _isatty(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
	return 1;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f002 fb3c 	bl	8003ad0 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20018000 	.word	0x20018000
 8001484:	00000400 	.word	0x00000400
 8001488:	200001dc 	.word	0x200001dc
 800148c:	20002818 	.word	0x20002818

08001490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001494:	4b15      	ldr	r3, [pc, #84]	; (80014ec <SystemInit+0x5c>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a14      	ldr	r2, [pc, #80]	; (80014ec <SystemInit+0x5c>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <SystemInit+0x60>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <SystemInit+0x60>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	; (80014f0 <SystemInit+0x60>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <SystemInit+0x60>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <SystemInit+0x60>)
 80014bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <SystemInit+0x60>)
 80014c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <SystemInit+0x60>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <SystemInit+0x60>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014da:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <SystemInit+0x60>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	40021000 	.word	0x40021000

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f8:	f7ff ffca 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80014fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80014fe:	e003      	b.n	8001508 <LoopCopyDataInit>

08001500 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001500:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001502:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001504:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001506:	3104      	adds	r1, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001508:	480a      	ldr	r0, [pc, #40]	; (8001534 <LoopForever+0xa>)
	ldr	r3, =_edata
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <LoopForever+0xe>)
	adds	r2, r0, r1
 800150c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800150e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001510:	d3f6      	bcc.n	8001500 <CopyDataInit>
	ldr	r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001514:	e002      	b.n	800151c <LoopFillZerobss>

08001516 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001516:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001518:	f842 3b04 	str.w	r3, [r2], #4

0800151c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <LoopForever+0x16>)
	cmp	r2, r3
 800151e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001520:	d3f9      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f002 fadb 	bl	8003adc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff fb77 	bl	8000c18 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001530:	08005110 	.word	0x08005110
	ldr	r0, =_sdata
 8001534:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001538:	200001bc 	.word	0x200001bc
	ldr	r2, =_sbss
 800153c:	200001bc 	.word	0x200001bc
	ldr	r3, = _ebss
 8001540:	20002818 	.word	0x20002818

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001552:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_Init+0x3c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_Init+0x3c>)
 8001558:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800155e:	2003      	movs	r0, #3
 8001560:	f000 f962 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001564:	2000      	movs	r0, #0
 8001566:	f000 f80f 	bl	8001588 <HAL_InitTick>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	e001      	b.n	800157a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001576:	f7ff fd57 	bl	8001028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800157a:	79fb      	ldrb	r3, [r7, #7]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_InitTick+0x6c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d023      	beq.n	80015e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800159c:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <HAL_InitTick+0x70>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_InitTick+0x6c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4619      	mov	r1, r3
 80015a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b2:	4618      	mov	r0, r3
 80015b4:	f000 f96d 	bl	8001892 <HAL_SYSTICK_Config>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10f      	bne.n	80015de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d809      	bhi.n	80015d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f000 f937 	bl	800183e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d0:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <HAL_InitTick+0x74>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e007      	b.n	80015e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	73fb      	strb	r3, [r7, #15]
 80015dc:	e004      	b.n	80015e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]
 80015e2:	e001      	b.n	80015e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000154 	.word	0x20000154
 80015f8:	2000014c 	.word	0x2000014c
 80015fc:	20000150 	.word	0x20000150

08001600 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_IncTick+0x20>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	461a      	mov	r2, r3
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_IncTick+0x24>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4413      	add	r3, r2
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <HAL_IncTick+0x24>)
 8001612:	6013      	str	r3, [r2, #0]
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	20000154 	.word	0x20000154
 8001624:	20002804 	.word	0x20002804

08001628 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return uwTick;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_GetTick+0x14>)
 800162e:	681b      	ldr	r3, [r3, #0]
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20002804 	.word	0x20002804

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff ffee 	bl	8001628 <HAL_GetTick>
 800164c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001666:	bf00      	nop
 8001668:	f7ff ffde 	bl	8001628 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000154 	.word	0x20000154

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b087      	sub	sp, #28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ba:	e17f      	b.n	8001bbc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	4013      	ands	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8171 	beq.w	8001bb6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d00b      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d007      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018e8:	2b11      	cmp	r3, #17
 80018ea:	d003      	beq.n	80018f4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2b12      	cmp	r3, #18
 80018f2:	d130      	bne.n	8001956 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800192a:	2201      	movs	r2, #1
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	f003 0201 	and.w	r2, r3, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b03      	cmp	r3, #3
 8001960:	d118      	bne.n	8001994 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001966:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001968:	2201      	movs	r2, #1
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	08db      	lsrs	r3, r3, #3
 800197e:	f003 0201 	and.w	r2, r3, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4313      	orrs	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	2203      	movs	r2, #3
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x128>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b12      	cmp	r3, #18
 80019d2:	d123      	bne.n	8001a1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	08da      	lsrs	r2, r3, #3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3208      	adds	r2, #8
 80019dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	220f      	movs	r2, #15
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	08da      	lsrs	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3208      	adds	r2, #8
 8001a16:	6939      	ldr	r1, [r7, #16]
 8001a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0203 	and.w	r2, r3, #3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 80ac 	beq.w	8001bb6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	4b5f      	ldr	r3, [pc, #380]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	4a5e      	ldr	r2, [pc, #376]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6613      	str	r3, [r2, #96]	; 0x60
 8001a6a:	4b5c      	ldr	r3, [pc, #368]	; (8001bdc <HAL_GPIO_Init+0x330>)
 8001a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a76:	4a5a      	ldr	r2, [pc, #360]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	220f      	movs	r2, #15
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa0:	d025      	beq.n	8001aee <HAL_GPIO_Init+0x242>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4f      	ldr	r2, [pc, #316]	; (8001be4 <HAL_GPIO_Init+0x338>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d01f      	beq.n	8001aea <HAL_GPIO_Init+0x23e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4e      	ldr	r2, [pc, #312]	; (8001be8 <HAL_GPIO_Init+0x33c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d019      	beq.n	8001ae6 <HAL_GPIO_Init+0x23a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4d      	ldr	r2, [pc, #308]	; (8001bec <HAL_GPIO_Init+0x340>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d013      	beq.n	8001ae2 <HAL_GPIO_Init+0x236>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4c      	ldr	r2, [pc, #304]	; (8001bf0 <HAL_GPIO_Init+0x344>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00d      	beq.n	8001ade <HAL_GPIO_Init+0x232>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4b      	ldr	r2, [pc, #300]	; (8001bf4 <HAL_GPIO_Init+0x348>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d007      	beq.n	8001ada <HAL_GPIO_Init+0x22e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	; (8001bf8 <HAL_GPIO_Init+0x34c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d101      	bne.n	8001ad6 <HAL_GPIO_Init+0x22a>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e00c      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	e00a      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001ada:	2305      	movs	r3, #5
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x244>
 8001aee:	2300      	movs	r3, #0
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b00:	4937      	ldr	r1, [pc, #220]	; (8001be0 <HAL_GPIO_Init+0x334>)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b32:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001b38:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b5c:	4a27      	ldr	r2, [pc, #156]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b62:	4b26      	ldr	r3, [pc, #152]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bb0:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <HAL_GPIO_Init+0x350>)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f47f ae78 	bne.w	80018bc <HAL_GPIO_Init+0x10>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	371c      	adds	r7, #28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40010000 	.word	0x40010000
 8001be4:	48000400 	.word	0x48000400
 8001be8:	48000800 	.word	0x48000800
 8001bec:	48000c00 	.word	0x48000c00
 8001bf0:	48001000 	.word	0x48001000
 8001bf4:	48001400 	.word	0x48001400
 8001bf8:	48001800 	.word	0x48001800
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c34:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_PWREx_GetVoltageRange+0x18>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40007000 	.word	0x40007000

08001c4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5a:	d130      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c68:	d038      	beq.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c72:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2232      	movs	r2, #50	; 0x32
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c86:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8a:	0c9b      	lsrs	r3, r3, #18
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c90:	e002      	b.n	8001c98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c98:	4b14      	ldr	r3, [pc, #80]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ca4:	d102      	bne.n	8001cac <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f2      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb8:	d110      	bne.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e00f      	b.n	8001cde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d007      	beq.n	8001cdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cd4:	4a05      	ldr	r2, [pc, #20]	; (8001cec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	40007000 	.word	0x40007000
 8001cf0:	2000014c 	.word	0x2000014c
 8001cf4:	431bde83 	.word	0x431bde83

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e3d4      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0a:	4ba1      	ldr	r3, [pc, #644]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d14:	4b9e      	ldr	r3, [pc, #632]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80e4 	beq.w	8001ef4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_RCC_OscConfig+0x4a>
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	f040 808b 	bne.w	8001e50 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	f040 8087 	bne.w	8001e50 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d42:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x62>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e3ac      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a1a      	ldr	r2, [r3, #32]
 8001d5e:	4b8c      	ldr	r3, [pc, #560]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d004      	beq.n	8001d74 <HAL_RCC_OscConfig+0x7c>
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d72:	e005      	b.n	8001d80 <HAL_RCC_OscConfig+0x88>
 8001d74:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d223      	bcs.n	8001dcc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f000 fd41 	bl	8002810 <RCC_SetFlashLatencyFromMSIRange>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e38d      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d98:	4b7d      	ldr	r3, [pc, #500]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7c      	ldr	r2, [pc, #496]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001d9e:	f043 0308 	orr.w	r3, r3, #8
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4977      	ldr	r1, [pc, #476]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db6:	4b76      	ldr	r3, [pc, #472]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	4972      	ldr	r1, [pc, #456]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
 8001dca:	e025      	b.n	8001e18 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dcc:	4b70      	ldr	r3, [pc, #448]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a6f      	ldr	r2, [pc, #444]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dd2:	f043 0308 	orr.w	r3, r3, #8
 8001dd6:	6013      	str	r3, [r2, #0]
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	496a      	ldr	r1, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dea:	4b69      	ldr	r3, [pc, #420]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	021b      	lsls	r3, r3, #8
 8001df8:	4965      	ldr	r1, [pc, #404]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d109      	bne.n	8001e18 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f000 fd01 	bl	8002810 <RCC_SetFlashLatencyFromMSIRange>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e34d      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e18:	f000 fc36 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b5c      	ldr	r3, [pc, #368]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	495a      	ldr	r1, [pc, #360]	; (8001f94 <HAL_RCC_OscConfig+0x29c>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	f003 031f 	and.w	r3, r3, #31
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_RCC_OscConfig+0x2a0>)
 8001e36:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e38:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <HAL_RCC_OscConfig+0x2a4>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fba3 	bl	8001588 <HAL_InitTick>
 8001e42:	4603      	mov	r3, r0
 8001e44:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d052      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	e331      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d032      	beq.n	8001ebe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e58:	4b4d      	ldr	r3, [pc, #308]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a4c      	ldr	r2, [pc, #304]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e64:	f7ff fbe0 	bl	8001628 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e6c:	f7ff fbdc 	bl	8001628 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e31a      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e7e:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e8a:	4b41      	ldr	r3, [pc, #260]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a40      	ldr	r2, [pc, #256]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e90:	f043 0308 	orr.w	r3, r3, #8
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b3e      	ldr	r3, [pc, #248]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a1b      	ldr	r3, [r3, #32]
 8001ea2:	493b      	ldr	r1, [pc, #236]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ea8:	4b39      	ldr	r3, [pc, #228]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	021b      	lsls	r3, r3, #8
 8001eb6:	4936      	ldr	r1, [pc, #216]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
 8001ebc:	e01a      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fbad 	bl	8001628 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fba9 	bl	8001628 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e2e7      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f0      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x1da>
 8001ef0:	e000      	b.n	8001ef4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ef2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d074      	beq.n	8001fea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d005      	beq.n	8001f12 <HAL_RCC_OscConfig+0x21a>
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d10e      	bne.n	8001f2a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d10b      	bne.n	8001f2a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f12:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d064      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d160      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e2c4      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x24a>
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e01d      	b.n	8001f7e <HAL_RCC_OscConfig+0x286>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x26e>
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0f      	ldr	r2, [pc, #60]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x286>
 8001f66:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a09      	ldr	r2, [pc, #36]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_RCC_OscConfig+0x298>)
 8001f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d01c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fb4f 	bl	8001628 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f8c:	e011      	b.n	8001fb2 <HAL_RCC_OscConfig+0x2ba>
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000
 8001f94:	08004e6c 	.word	0x08004e6c
 8001f98:	2000014c 	.word	0x2000014c
 8001f9c:	20000150 	.word	0x20000150
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fb42 	bl	8001628 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e280      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb2:	4baf      	ldr	r3, [pc, #700]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x2a8>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fb32 	bl	8001628 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fb2e 	bl	8001628 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e26c      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fda:	4ba5      	ldr	r3, [pc, #660]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2d0>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d060      	beq.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_OscConfig+0x310>
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2b0c      	cmp	r3, #12
 8002000:	d119      	bne.n	8002036 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d116      	bne.n	8002036 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002008:	4b99      	ldr	r3, [pc, #612]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x328>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e249      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b93      	ldr	r3, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	061b      	lsls	r3, r3, #24
 800202e:	4990      	ldr	r1, [pc, #576]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002034:	e040      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d023      	beq.n	8002086 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800203e:	4b8c      	ldr	r3, [pc, #560]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a8b      	ldr	r2, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff faed 	bl	8001628 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff fae9 	bl	8001628 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e227      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002064:	4b82      	ldr	r3, [pc, #520]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b7f      	ldr	r3, [pc, #508]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	061b      	lsls	r3, r3, #24
 800207e:	497c      	ldr	r1, [pc, #496]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002080:	4313      	orrs	r3, r2
 8002082:	604b      	str	r3, [r1, #4]
 8002084:	e018      	b.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a79      	ldr	r2, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800208c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002092:	f7ff fac9 	bl	8001628 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209a:	f7ff fac5 	bl	8001628 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e203      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020ac:	4b70      	ldr	r3, [pc, #448]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d03c      	beq.n	800213e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d01c      	beq.n	8002106 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b68      	ldr	r3, [pc, #416]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d2:	4a67      	ldr	r2, [pc, #412]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff faa4 	bl	8001628 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff faa0 	bl	8001628 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1de      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ef      	beq.n	80020e4 <HAL_RCC_OscConfig+0x3ec>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002106:	4b5a      	ldr	r3, [pc, #360]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002108:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002116:	f7ff fa87 	bl	8001628 <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211e:	f7ff fa83 	bl	8001628 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e1c1      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002130:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ef      	bne.n	800211e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80a6 	beq.w	8002298 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800214c:	2300      	movs	r3, #0
 800214e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002154:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10d      	bne.n	8002178 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	4a43      	ldr	r2, [pc, #268]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	; 0x58
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002174:	2301      	movs	r3, #1
 8002176:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002178:	4b3e      	ldr	r3, [pc, #248]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d118      	bne.n	80021b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b3b      	ldr	r3, [pc, #236]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff fa4a 	bl	8001628 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002198:	f7ff fa46 	bl	8001628 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e184      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <HAL_RCC_OscConfig+0x57c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d108      	bne.n	80021d0 <HAL_RCC_OscConfig+0x4d8>
 80021be:	4b2c      	ldr	r3, [pc, #176]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ce:	e024      	b.n	800221a <HAL_RCC_OscConfig+0x522>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d110      	bne.n	80021fa <HAL_RCC_OscConfig+0x502>
 80021d8:	4b25      	ldr	r3, [pc, #148]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e8:	4b21      	ldr	r3, [pc, #132]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a20      	ldr	r2, [pc, #128]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021f8:	e00f      	b.n	800221a <HAL_RCC_OscConfig+0x522>
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 80021fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002200:	4a1b      	ldr	r2, [pc, #108]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002202:	f023 0301 	bic.w	r3, r3, #1
 8002206:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220a:	4b19      	ldr	r3, [pc, #100]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002212:	f023 0304 	bic.w	r3, r3, #4
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d016      	beq.n	8002250 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7ff fa01 	bl	8001628 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222a:	f7ff f9fd 	bl	8001628 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f241 3288 	movw	r2, #5000	; 0x1388
 8002238:	4293      	cmp	r3, r2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e139      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_RCC_OscConfig+0x578>)
 8002242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ed      	beq.n	800222a <HAL_RCC_OscConfig+0x532>
 800224e:	e01a      	b.n	8002286 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f9ea 	bl	8001628 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002256:	e00f      	b.n	8002278 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002258:	f7ff f9e6 	bl	8001628 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	f241 3288 	movw	r2, #5000	; 0x1388
 8002266:	4293      	cmp	r3, r2
 8002268:	d906      	bls.n	8002278 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e122      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
 800226e:	bf00      	nop
 8002270:	40021000 	.word	0x40021000
 8002274:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002278:	4b90      	ldr	r3, [pc, #576]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1e8      	bne.n	8002258 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002286:	7ffb      	ldrb	r3, [r7, #31]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b8b      	ldr	r3, [pc, #556]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a8a      	ldr	r2, [pc, #552]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	2b00      	cmp	r3, #0
 800229e:	f000 8108 	beq.w	80024b2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	f040 80d0 	bne.w	800244c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80022ac:	4b83      	ldr	r3, [pc, #524]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 0203 	and.w	r2, r3, #3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	429a      	cmp	r2, r3
 80022be:	d130      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	3b01      	subs	r3, #1
 80022cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d127      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d11f      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ec:	2a07      	cmp	r2, #7
 80022ee:	bf14      	ite	ne
 80022f0:	2201      	movne	r2, #1
 80022f2:	2200      	moveq	r2, #0
 80022f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d113      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	085b      	lsrs	r3, r3, #1
 8002306:	3b01      	subs	r3, #1
 8002308:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d109      	bne.n	8002322 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	3b01      	subs	r3, #1
 800231c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d06e      	beq.n	8002400 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2b0c      	cmp	r3, #12
 8002326:	d069      	beq.n	80023fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002328:	4b64      	ldr	r3, [pc, #400]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002334:	4b61      	ldr	r3, [pc, #388]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b7      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002344:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a5c      	ldr	r2, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800234a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002350:	f7ff f96a 	bl	8001628 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7ff f966 	bl	8001628 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e0a4      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800236a:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f0      	bne.n	8002358 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002376:	4b51      	ldr	r3, [pc, #324]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	4b51      	ldr	r3, [pc, #324]	; (80024c0 <HAL_RCC_OscConfig+0x7c8>)
 800237c:	4013      	ands	r3, r2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002386:	3a01      	subs	r2, #1
 8002388:	0112      	lsls	r2, r2, #4
 800238a:	4311      	orrs	r1, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002390:	0212      	lsls	r2, r2, #8
 8002392:	4311      	orrs	r1, r2
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002398:	0852      	lsrs	r2, r2, #1
 800239a:	3a01      	subs	r2, #1
 800239c:	0552      	lsls	r2, r2, #21
 800239e:	4311      	orrs	r1, r2
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80023a4:	0852      	lsrs	r2, r2, #1
 80023a6:	3a01      	subs	r2, #1
 80023a8:	0652      	lsls	r2, r2, #25
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80023b0:	0912      	lsrs	r2, r2, #4
 80023b2:	0452      	lsls	r2, r2, #17
 80023b4:	430a      	orrs	r2, r1
 80023b6:	4941      	ldr	r1, [pc, #260]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80023bc:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3e      	ldr	r2, [pc, #248]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c8:	4b3c      	ldr	r3, [pc, #240]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023d4:	f7ff f928 	bl	8001628 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023dc:	f7ff f924 	bl	8001628 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e062      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023fa:	e05a      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e059      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002400:	4b2e      	ldr	r3, [pc, #184]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d152      	bne.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800240c:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2a      	ldr	r2, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002416:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4a27      	ldr	r2, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002424:	f7ff f900 	bl	8001628 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff f8fc 	bl	8001628 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e03a      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x734>
 800244a:	e032      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d02d      	beq.n	80024ae <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800246a:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	4a13      	ldr	r2, [pc, #76]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002470:	f023 0303 	bic.w	r3, r3, #3
 8002474:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	4a10      	ldr	r2, [pc, #64]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 800247c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff f8cf 	bl	8001628 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7ff f8cb 	bl	8001628 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e009      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_OscConfig+0x7c4>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x796>
 80024ac:	e001      	b.n	80024b2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	f99d808c 	.word	0xf99d808c

080024c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e0c8      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4961      	ldr	r1, [pc, #388]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b5f      	ldr	r3, [pc, #380]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0b0      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d04c      	beq.n	80025ae <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d107      	bne.n	800252c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251c:	4b56      	ldr	r3, [pc, #344]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d121      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e09e      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d107      	bne.n	8002544 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002534:	4b50      	ldr	r3, [pc, #320]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d115      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e092      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d107      	bne.n	800255c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800254c:	4b4a      	ldr	r3, [pc, #296]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e086      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255c:	4b46      	ldr	r3, [pc, #280]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e07e      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 0203 	bic.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	493f      	ldr	r1, [pc, #252]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800257e:	f7ff f853 	bl	8001628 <HAL_GetTick>
 8002582:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002584:	e00a      	b.n	800259c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002586:	f7ff f84f 	bl	8001628 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e066      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 020c 	and.w	r2, r3, #12
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d1eb      	bne.n	8002586 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d008      	beq.n	80025cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ba:	4b2f      	ldr	r3, [pc, #188]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	492c      	ldr	r1, [pc, #176]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b29      	ldr	r3, [pc, #164]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d210      	bcs.n	80025fc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0207 	bic.w	r2, r3, #7
 80025e2:	4924      	ldr	r1, [pc, #144]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ea:	4b22      	ldr	r3, [pc, #136]	; (8002674 <HAL_RCC_ClockConfig+0x1b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	683a      	ldr	r2, [r7, #0]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e036      	b.n	800266a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d008      	beq.n	800261a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4918      	ldr	r1, [pc, #96]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002616:	4313      	orrs	r3, r2
 8002618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4910      	ldr	r1, [pc, #64]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800263a:	f000 f825 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800263e:	4602      	mov	r2, r0
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <HAL_RCC_ClockConfig+0x1b4>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	490c      	ldr	r1, [pc, #48]	; (800267c <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	5ccb      	ldrb	r3, [r1, r3]
 800264e:	f003 031f 	and.w	r3, r3, #31
 8002652:	fa22 f303 	lsr.w	r3, r2, r3
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_RCC_ClockConfig+0x1bc>)
 8002658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe ff92 	bl	8001588 <HAL_InitTick>
 8002664:	4603      	mov	r3, r0
 8002666:	72fb      	strb	r3, [r7, #11]

  return status;
 8002668:	7afb      	ldrb	r3, [r7, #11]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40022000 	.word	0x40022000
 8002678:	40021000 	.word	0x40021000
 800267c:	08004e6c 	.word	0x08004e6c
 8002680:	2000014c 	.word	0x2000014c
 8002684:	20000150 	.word	0x20000150

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002696:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
 800269e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026a0:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	d121      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d11e      	bne.n	80026fa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026bc:	4b34      	ldr	r3, [pc, #208]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c8:	4b31      	ldr	r3, [pc, #196]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	61fb      	str	r3, [r7, #28]
 80026d6:	e005      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d8:	4b2d      	ldr	r3, [pc, #180]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e4:	4a2b      	ldr	r2, [pc, #172]	; (8002794 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ec:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10d      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d102      	bne.n	8002706 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002702:	61bb      	str	r3, [r7, #24]
 8002704:	e004      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d101      	bne.n	8002710 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_RCC_GetSysClockFreq+0x114>)
 800270e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	2b0c      	cmp	r3, #12
 8002714:	d134      	bne.n	8002780 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002716:	4b1e      	ldr	r3, [pc, #120]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d003      	beq.n	800272e <HAL_RCC_GetSysClockFreq+0xa6>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d003      	beq.n	8002734 <HAL_RCC_GetSysClockFreq+0xac>
 800272c:	e005      	b.n	800273a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_RCC_GetSysClockFreq+0x110>)
 8002730:	617b      	str	r3, [r7, #20]
      break;
 8002732:	e005      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_RCC_GetSysClockFreq+0x114>)
 8002736:	617b      	str	r3, [r7, #20]
      break;
 8002738:	e002      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	617b      	str	r3, [r7, #20]
      break;
 800273e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	3301      	adds	r3, #1
 800274c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	fb02 f203 	mul.w	r2, r2, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	0e5b      	lsrs	r3, r3, #25
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	3301      	adds	r3, #1
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	fbb2 f3f3 	udiv	r3, r2, r3
 800277e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002780:	69bb      	ldr	r3, [r7, #24]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	08004e84 	.word	0x08004e84
 8002798:	00f42400 	.word	0x00f42400
 800279c:	007a1200 	.word	0x007a1200

080027a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027a4:	4b03      	ldr	r3, [pc, #12]	; (80027b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	2000014c 	.word	0x2000014c

080027b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027c0:	4602      	mov	r2, r0
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	0a1b      	lsrs	r3, r3, #8
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ce:	5ccb      	ldrb	r3, [r1, r3]
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d8:	4618      	mov	r0, r3
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000
 80027e0:	08004e7c 	.word	0x08004e7c

080027e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027e8:	f7ff ffda 	bl	80027a0 <HAL_RCC_GetHCLKFreq>
 80027ec:	4602      	mov	r2, r0
 80027ee:	4b06      	ldr	r3, [pc, #24]	; (8002808 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0adb      	lsrs	r3, r3, #11
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCC_GetPCLK2Freq+0x28>)
 80027fa:	5ccb      	ldrb	r3, [r1, r3]
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40021000 	.word	0x40021000
 800280c:	08004e7c 	.word	0x08004e7c

08002810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800281c:	4b2a      	ldr	r3, [pc, #168]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d003      	beq.n	8002830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002828:	f7ff fa02 	bl	8001c30 <HAL_PWREx_GetVoltageRange>
 800282c:	6178      	str	r0, [r7, #20]
 800282e:	e014      	b.n	800285a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	; 0x58
 800283c:	4b22      	ldr	r3, [pc, #136]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002848:	f7ff f9f2 	bl	8001c30 <HAL_PWREx_GetVoltageRange>
 800284c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800284e:	4b1e      	ldr	r3, [pc, #120]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	4a1d      	ldr	r2, [pc, #116]	; (80028c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002858:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002860:	d10b      	bne.n	800287a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d919      	bls.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2ba0      	cmp	r3, #160	; 0xa0
 800286c:	d902      	bls.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800286e:	2302      	movs	r3, #2
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e013      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002874:	2301      	movs	r3, #1
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	e010      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b80      	cmp	r3, #128	; 0x80
 800287e:	d902      	bls.n	8002886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002880:	2303      	movs	r3, #3
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e00a      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d102      	bne.n	8002892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800288c:	2302      	movs	r3, #2
 800288e:	613b      	str	r3, [r7, #16]
 8002890:	e004      	b.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b70      	cmp	r3, #112	; 0x70
 8002896:	d101      	bne.n	800289c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002898:	2301      	movs	r3, #1
 800289a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f023 0207 	bic.w	r2, r3, #7
 80028a4:	4909      	ldr	r1, [pc, #36]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028ac:	4b07      	ldr	r3, [pc, #28]	; (80028cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d001      	beq.n	80028be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40022000 	.word	0x40022000

080028d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028d8:	2300      	movs	r3, #0
 80028da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028dc:	2300      	movs	r3, #0
 80028de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d041      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028f4:	d02a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028f6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fa:	d824      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002900:	d008      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002906:	d81e      	bhi.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800290c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002910:	d010      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002912:	e018      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002914:	4b86      	ldr	r3, [pc, #536]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a85      	ldr	r2, [pc, #532]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002920:	e015      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	3304      	adds	r3, #4
 8002926:	2100      	movs	r1, #0
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fabb 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 800292e:	4603      	mov	r3, r0
 8002930:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002932:	e00c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3320      	adds	r3, #32
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f000 fba6 	bl	800308c <RCCEx_PLLSAI2_Config>
 8002940:	4603      	mov	r3, r0
 8002942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002944:	e003      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	74fb      	strb	r3, [r7, #19]
      break;
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7cfb      	ldrb	r3, [r7, #19]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10b      	bne.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002954:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002962:	4973      	ldr	r1, [pc, #460]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800296a:	e001      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296c:	7cfb      	ldrb	r3, [r7, #19]
 800296e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d041      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002980:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002984:	d02a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002986:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800298a:	d824      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800298c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002990:	d008      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002992:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002996:	d81e      	bhi.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800299c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029a0:	d010      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029a2:	e018      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029a4:	4b62      	ldr	r3, [pc, #392]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a61      	ldr	r2, [pc, #388]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029b0:	e015      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2100      	movs	r1, #0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 fa73 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029c2:	e00c      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3320      	adds	r3, #32
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fb5e 	bl	800308c <RCCEx_PLLSAI2_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80029d4:	e003      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	74fb      	strb	r3, [r7, #19]
      break;
 80029da:	e000      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10b      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029e4:	4b52      	ldr	r3, [pc, #328]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f2:	494f      	ldr	r1, [pc, #316]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029fa:	e001      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fc:	7cfb      	ldrb	r3, [r7, #19]
 80029fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 80a0 	beq.w	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a28:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2c:	4a40      	ldr	r2, [pc, #256]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6593      	str	r3, [r2, #88]	; 0x58
 8002a34:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a40:	2301      	movs	r3, #1
 8002a42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a44:	4b3b      	ldr	r3, [pc, #236]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a50:	f7fe fdea 	bl	8001628 <HAL_GetTick>
 8002a54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a56:	e009      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a58:	f7fe fde6 	bl	8001628 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d902      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	74fb      	strb	r3, [r7, #19]
        break;
 8002a6a:	e005      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d0ef      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d15c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a7e:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01f      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d019      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a9c:	4b24      	ldr	r3, [pc, #144]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002aa8:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ac8:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fda5 	bl	8001628 <HAL_GetTick>
 8002ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae0:	e00b      	b.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fda1 	bl	8001628 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d902      	bls.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	74fb      	strb	r3, [r7, #19]
            break;
 8002af8:	e006      	b.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002afa:	4b0d      	ldr	r3, [pc, #52]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ec      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002b08:	7cfb      	ldrb	r3, [r7, #19]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10c      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b1e:	4904      	ldr	r1, [pc, #16]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002b26:	e009      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	74bb      	strb	r3, [r7, #18]
 8002b2c:	e006      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b38:	7cfb      	ldrb	r3, [r7, #19]
 8002b3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b3c:	7c7b      	ldrb	r3, [r7, #17]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d105      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b42:	4b9e      	ldr	r3, [pc, #632]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a9d      	ldr	r2, [pc, #628]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5a:	4b98      	ldr	r3, [pc, #608]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b60:	f023 0203 	bic.w	r2, r3, #3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	4994      	ldr	r1, [pc, #592]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b7c:	4b8f      	ldr	r3, [pc, #572]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b82:	f023 020c 	bic.w	r2, r3, #12
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	498c      	ldr	r1, [pc, #560]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0304 	and.w	r3, r3, #4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b9e:	4b87      	ldr	r3, [pc, #540]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4983      	ldr	r1, [pc, #524]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc0:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bce:	497b      	ldr	r1, [pc, #492]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002be2:	4b76      	ldr	r3, [pc, #472]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	4972      	ldr	r1, [pc, #456]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0320 	and.w	r3, r3, #32
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c04:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c12:	496a      	ldr	r1, [pc, #424]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c26:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	4961      	ldr	r1, [pc, #388]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c48:	4b5c      	ldr	r3, [pc, #368]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c56:	4959      	ldr	r1, [pc, #356]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c6a:	4b54      	ldr	r3, [pc, #336]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c78:	4950      	ldr	r1, [pc, #320]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c8c:	4b4b      	ldr	r3, [pc, #300]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c92:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9a:	4948      	ldr	r1, [pc, #288]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00a      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cae:	4b43      	ldr	r3, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cbc:	493f      	ldr	r1, [pc, #252]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d028      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cde:	4937      	ldr	r1, [pc, #220]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cee:	d106      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf0:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	4a31      	ldr	r2, [pc, #196]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cfa:	60d3      	str	r3, [r2, #12]
 8002cfc:	e011      	b.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d06:	d10c      	bne.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3304      	adds	r3, #4
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f8c8 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002d14:	4603      	mov	r3, r0
 8002d16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002d1e:	7cfb      	ldrb	r3, [r7, #19]
 8002d20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d028      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d2e:	4b23      	ldr	r3, [pc, #140]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	491f      	ldr	r1, [pc, #124]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d58:	60d3      	str	r3, [r2, #12]
 8002d5a:	e011      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d64:	d10c      	bne.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f000 f899 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002d72:	4603      	mov	r3, r0
 8002d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d02b      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002daa:	d109      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4a02      	ldr	r2, [pc, #8]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002db6:	60d3      	str	r3, [r2, #12]
 8002db8:	e014      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dc8:	d10c      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 f867 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dda:	7cfb      	ldrb	r3, [r7, #19]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d02f      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	4928      	ldr	r1, [pc, #160]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e0e:	d10d      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3304      	adds	r3, #4
 8002e14:	2102      	movs	r1, #2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f844 	bl	8002ea4 <RCCEx_PLLSAI1_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e20:	7cfb      	ldrb	r3, [r7, #19]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d014      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e26:	7cfb      	ldrb	r3, [r7, #19]
 8002e28:	74bb      	strb	r3, [r7, #18]
 8002e2a:	e011      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3320      	adds	r3, #32
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f000 f925 	bl	800308c <RCCEx_PLLSAI2_Config>
 8002e42:	4603      	mov	r3, r0
 8002e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e46:	7cfb      	ldrb	r3, [r7, #19]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e4c:	7cfb      	ldrb	r3, [r7, #19]
 8002e4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e5c:	4b10      	ldr	r3, [pc, #64]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e62:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e7e:	4b08      	ldr	r3, [pc, #32]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e8e:	4904      	ldr	r1, [pc, #16]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002eb2:	4b75      	ldr	r3, [pc, #468]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d018      	beq.n	8002ef0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ebe:	4b72      	ldr	r3, [pc, #456]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0203 	and.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d10d      	bne.n	8002eea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d009      	beq.n	8002eea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ed6:	4b6c      	ldr	r3, [pc, #432]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	1c5a      	adds	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d047      	beq.n	8002f7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
 8002eee:	e044      	b.n	8002f7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d018      	beq.n	8002f2a <RCCEx_PLLSAI1_Config+0x86>
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d825      	bhi.n	8002f48 <RCCEx_PLLSAI1_Config+0xa4>
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d002      	beq.n	8002f06 <RCCEx_PLLSAI1_Config+0x62>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d009      	beq.n	8002f18 <RCCEx_PLLSAI1_Config+0x74>
 8002f04:	e020      	b.n	8002f48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f06:	4b60      	ldr	r3, [pc, #384]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d11d      	bne.n	8002f4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f16:	e01a      	b.n	8002f4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f18:	4b5b      	ldr	r3, [pc, #364]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d116      	bne.n	8002f52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f28:	e013      	b.n	8002f52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f2a:	4b57      	ldr	r3, [pc, #348]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f36:	4b54      	ldr	r3, [pc, #336]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d109      	bne.n	8002f56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f46:	e006      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f4c:	e004      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f58:	7bfb      	ldrb	r3, [r7, #15]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f5e:	4b4a      	ldr	r3, [pc, #296]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6819      	ldr	r1, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	430b      	orrs	r3, r1
 8002f74:	4944      	ldr	r1, [pc, #272]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d17d      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f80:	4b41      	ldr	r3, [pc, #260]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a40      	ldr	r2, [pc, #256]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fb4c 	bl	8001628 <HAL_GetTick>
 8002f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f92:	e009      	b.n	8002fa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f94:	f7fe fb48 	bl	8001628 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d902      	bls.n	8002fa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8002fa6:	e005      	b.n	8002fb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa8:	4b37      	ldr	r3, [pc, #220]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ef      	bne.n	8002f94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d160      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fc0:	4b31      	ldr	r3, [pc, #196]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6892      	ldr	r2, [r2, #8]
 8002fd0:	0211      	lsls	r1, r2, #8
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68d2      	ldr	r2, [r2, #12]
 8002fd6:	0912      	lsrs	r2, r2, #4
 8002fd8:	0452      	lsls	r2, r2, #17
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	492a      	ldr	r1, [pc, #168]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	610b      	str	r3, [r1, #16]
 8002fe2:	e027      	b.n	8003034 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d112      	bne.n	8003010 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ff2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	0211      	lsls	r1, r2, #8
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6912      	ldr	r2, [r2, #16]
 8003000:	0852      	lsrs	r2, r2, #1
 8003002:	3a01      	subs	r2, #1
 8003004:	0552      	lsls	r2, r2, #21
 8003006:	430a      	orrs	r2, r1
 8003008:	491f      	ldr	r1, [pc, #124]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800300a:	4313      	orrs	r3, r2
 800300c:	610b      	str	r3, [r1, #16]
 800300e:	e011      	b.n	8003034 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003010:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003018:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6892      	ldr	r2, [r2, #8]
 8003020:	0211      	lsls	r1, r2, #8
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6952      	ldr	r2, [r2, #20]
 8003026:	0852      	lsrs	r2, r2, #1
 8003028:	3a01      	subs	r2, #1
 800302a:	0652      	lsls	r2, r2, #25
 800302c:	430a      	orrs	r2, r1
 800302e:	4916      	ldr	r1, [pc, #88]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003030:	4313      	orrs	r3, r2
 8003032:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003034:	4b14      	ldr	r3, [pc, #80]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a13      	ldr	r2, [pc, #76]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800303a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800303e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003040:	f7fe faf2 	bl	8001628 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003046:	e009      	b.n	800305c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003048:	f7fe faee 	bl	8001628 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d902      	bls.n	800305c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	73fb      	strb	r3, [r7, #15]
          break;
 800305a:	e005      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0ef      	beq.n	8003048 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	4904      	ldr	r1, [pc, #16]	; (8003088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003078:	4313      	orrs	r3, r2
 800307a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000

0800308c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800309a:	4b6a      	ldr	r3, [pc, #424]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d018      	beq.n	80030d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80030a6:	4b67      	ldr	r3, [pc, #412]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0203 	and.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d10d      	bne.n	80030d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
       ||
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	091b      	lsrs	r3, r3, #4
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
       ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d047      	beq.n	8003162 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
 80030d6:	e044      	b.n	8003162 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b03      	cmp	r3, #3
 80030de:	d018      	beq.n	8003112 <RCCEx_PLLSAI2_Config+0x86>
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d825      	bhi.n	8003130 <RCCEx_PLLSAI2_Config+0xa4>
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d002      	beq.n	80030ee <RCCEx_PLLSAI2_Config+0x62>
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d009      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x74>
 80030ec:	e020      	b.n	8003130 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030ee:	4b55      	ldr	r3, [pc, #340]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11d      	bne.n	8003136 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fe:	e01a      	b.n	8003136 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003100:	4b50      	ldr	r3, [pc, #320]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003110:	e013      	b.n	800313a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003112:	4b4c      	ldr	r3, [pc, #304]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800311e:	4b49      	ldr	r3, [pc, #292]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800312e:	e006      	b.n	800313e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      break;
 8003134:	e004      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003136:	bf00      	nop
 8003138:	e002      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313a:	bf00      	nop
 800313c:	e000      	b.n	8003140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800313e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003146:	4b3f      	ldr	r3, [pc, #252]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	3b01      	subs	r3, #1
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	430b      	orrs	r3, r1
 800315c:	4939      	ldr	r1, [pc, #228]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	4313      	orrs	r3, r2
 8003160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003162:	7bfb      	ldrb	r3, [r7, #15]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d167      	bne.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a35      	ldr	r2, [pc, #212]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003174:	f7fe fa58 	bl	8001628 <HAL_GetTick>
 8003178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800317a:	e009      	b.n	8003190 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800317c:	f7fe fa54 	bl	8001628 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d902      	bls.n	8003190 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	73fb      	strb	r3, [r7, #15]
        break;
 800318e:	e005      	b.n	800319c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003190:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1ef      	bne.n	800317c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d14a      	bne.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031a8:	4b26      	ldr	r3, [pc, #152]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80031b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6892      	ldr	r2, [r2, #8]
 80031b8:	0211      	lsls	r1, r2, #8
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	0912      	lsrs	r2, r2, #4
 80031c0:	0452      	lsls	r2, r2, #17
 80031c2:	430a      	orrs	r2, r1
 80031c4:	491f      	ldr	r1, [pc, #124]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	614b      	str	r3, [r1, #20]
 80031ca:	e011      	b.n	80031f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80031d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6892      	ldr	r2, [r2, #8]
 80031dc:	0211      	lsls	r1, r2, #8
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6912      	ldr	r2, [r2, #16]
 80031e2:	0852      	lsrs	r2, r2, #1
 80031e4:	3a01      	subs	r2, #1
 80031e6:	0652      	lsls	r2, r2, #25
 80031e8:	430a      	orrs	r2, r1
 80031ea:	4916      	ldr	r1, [pc, #88]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a13      	ldr	r2, [pc, #76]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fe fa14 	bl	8001628 <HAL_GetTick>
 8003200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003202:	e009      	b.n	8003218 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003204:	f7fe fa10 	bl	8001628 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d902      	bls.n	8003218 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	73fb      	strb	r3, [r7, #15]
          break;
 8003216:	e005      	b.n	8003224 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0ef      	beq.n	8003204 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003224:	7bfb      	ldrb	r3, [r7, #15]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800322a:	4b06      	ldr	r3, [pc, #24]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	4904      	ldr	r1, [pc, #16]	; (8003244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003234:	4313      	orrs	r3, r2
 8003236:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40021000 	.word	0x40021000

08003248 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e040      	b.n	80032dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800325e:	2b00      	cmp	r3, #0
 8003260:	d106      	bne.n	8003270 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f7fd ff00 	bl	8001070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f82c 	bl	80032e4 <UART_SetConfig>
 800328c:	4603      	mov	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e022      	b.n	80032dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 faaa 	bl	80037f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689a      	ldr	r2, [r3, #8]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fb31 	bl	800393c <UART_CheckIdleState>
 80032da:	4603      	mov	r3, r0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	4313      	orrs	r3, r2
 8003306:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	4bad      	ldr	r3, [pc, #692]	; (80035c4 <UART_SetConfig+0x2e0>)
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6812      	ldr	r2, [r2, #0]
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	430b      	orrs	r3, r1
 800331a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4aa2      	ldr	r2, [pc, #648]	; (80035c8 <UART_SetConfig+0x2e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	4313      	orrs	r3, r2
 800334a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	430a      	orrs	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a99      	ldr	r2, [pc, #612]	; (80035cc <UART_SetConfig+0x2e8>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d121      	bne.n	80033ae <UART_SetConfig+0xca>
 800336a:	4b99      	ldr	r3, [pc, #612]	; (80035d0 <UART_SetConfig+0x2ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	2b03      	cmp	r3, #3
 8003376:	d817      	bhi.n	80033a8 <UART_SetConfig+0xc4>
 8003378:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <UART_SetConfig+0x9c>)
 800337a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337e:	bf00      	nop
 8003380:	08003391 	.word	0x08003391
 8003384:	0800339d 	.word	0x0800339d
 8003388:	08003397 	.word	0x08003397
 800338c:	080033a3 	.word	0x080033a3
 8003390:	2301      	movs	r3, #1
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e0e7      	b.n	8003566 <UART_SetConfig+0x282>
 8003396:	2302      	movs	r3, #2
 8003398:	76fb      	strb	r3, [r7, #27]
 800339a:	e0e4      	b.n	8003566 <UART_SetConfig+0x282>
 800339c:	2304      	movs	r3, #4
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e0e1      	b.n	8003566 <UART_SetConfig+0x282>
 80033a2:	2308      	movs	r3, #8
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e0de      	b.n	8003566 <UART_SetConfig+0x282>
 80033a8:	2310      	movs	r3, #16
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e0db      	b.n	8003566 <UART_SetConfig+0x282>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a88      	ldr	r2, [pc, #544]	; (80035d4 <UART_SetConfig+0x2f0>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d132      	bne.n	800341e <UART_SetConfig+0x13a>
 80033b8:	4b85      	ldr	r3, [pc, #532]	; (80035d0 <UART_SetConfig+0x2ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d828      	bhi.n	8003418 <UART_SetConfig+0x134>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <UART_SetConfig+0xe8>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	08003401 	.word	0x08003401
 80033d0:	08003419 	.word	0x08003419
 80033d4:	08003419 	.word	0x08003419
 80033d8:	08003419 	.word	0x08003419
 80033dc:	0800340d 	.word	0x0800340d
 80033e0:	08003419 	.word	0x08003419
 80033e4:	08003419 	.word	0x08003419
 80033e8:	08003419 	.word	0x08003419
 80033ec:	08003407 	.word	0x08003407
 80033f0:	08003419 	.word	0x08003419
 80033f4:	08003419 	.word	0x08003419
 80033f8:	08003419 	.word	0x08003419
 80033fc:	08003413 	.word	0x08003413
 8003400:	2300      	movs	r3, #0
 8003402:	76fb      	strb	r3, [r7, #27]
 8003404:	e0af      	b.n	8003566 <UART_SetConfig+0x282>
 8003406:	2302      	movs	r3, #2
 8003408:	76fb      	strb	r3, [r7, #27]
 800340a:	e0ac      	b.n	8003566 <UART_SetConfig+0x282>
 800340c:	2304      	movs	r3, #4
 800340e:	76fb      	strb	r3, [r7, #27]
 8003410:	e0a9      	b.n	8003566 <UART_SetConfig+0x282>
 8003412:	2308      	movs	r3, #8
 8003414:	76fb      	strb	r3, [r7, #27]
 8003416:	e0a6      	b.n	8003566 <UART_SetConfig+0x282>
 8003418:	2310      	movs	r3, #16
 800341a:	76fb      	strb	r3, [r7, #27]
 800341c:	e0a3      	b.n	8003566 <UART_SetConfig+0x282>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a6d      	ldr	r2, [pc, #436]	; (80035d8 <UART_SetConfig+0x2f4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d120      	bne.n	800346a <UART_SetConfig+0x186>
 8003428:	4b69      	ldr	r3, [pc, #420]	; (80035d0 <UART_SetConfig+0x2ec>)
 800342a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003432:	2b30      	cmp	r3, #48	; 0x30
 8003434:	d013      	beq.n	800345e <UART_SetConfig+0x17a>
 8003436:	2b30      	cmp	r3, #48	; 0x30
 8003438:	d814      	bhi.n	8003464 <UART_SetConfig+0x180>
 800343a:	2b20      	cmp	r3, #32
 800343c:	d009      	beq.n	8003452 <UART_SetConfig+0x16e>
 800343e:	2b20      	cmp	r3, #32
 8003440:	d810      	bhi.n	8003464 <UART_SetConfig+0x180>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <UART_SetConfig+0x168>
 8003446:	2b10      	cmp	r3, #16
 8003448:	d006      	beq.n	8003458 <UART_SetConfig+0x174>
 800344a:	e00b      	b.n	8003464 <UART_SetConfig+0x180>
 800344c:	2300      	movs	r3, #0
 800344e:	76fb      	strb	r3, [r7, #27]
 8003450:	e089      	b.n	8003566 <UART_SetConfig+0x282>
 8003452:	2302      	movs	r3, #2
 8003454:	76fb      	strb	r3, [r7, #27]
 8003456:	e086      	b.n	8003566 <UART_SetConfig+0x282>
 8003458:	2304      	movs	r3, #4
 800345a:	76fb      	strb	r3, [r7, #27]
 800345c:	e083      	b.n	8003566 <UART_SetConfig+0x282>
 800345e:	2308      	movs	r3, #8
 8003460:	76fb      	strb	r3, [r7, #27]
 8003462:	e080      	b.n	8003566 <UART_SetConfig+0x282>
 8003464:	2310      	movs	r3, #16
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e07d      	b.n	8003566 <UART_SetConfig+0x282>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a5b      	ldr	r2, [pc, #364]	; (80035dc <UART_SetConfig+0x2f8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d120      	bne.n	80034b6 <UART_SetConfig+0x1d2>
 8003474:	4b56      	ldr	r3, [pc, #344]	; (80035d0 <UART_SetConfig+0x2ec>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800347e:	2bc0      	cmp	r3, #192	; 0xc0
 8003480:	d013      	beq.n	80034aa <UART_SetConfig+0x1c6>
 8003482:	2bc0      	cmp	r3, #192	; 0xc0
 8003484:	d814      	bhi.n	80034b0 <UART_SetConfig+0x1cc>
 8003486:	2b80      	cmp	r3, #128	; 0x80
 8003488:	d009      	beq.n	800349e <UART_SetConfig+0x1ba>
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d810      	bhi.n	80034b0 <UART_SetConfig+0x1cc>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d002      	beq.n	8003498 <UART_SetConfig+0x1b4>
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d006      	beq.n	80034a4 <UART_SetConfig+0x1c0>
 8003496:	e00b      	b.n	80034b0 <UART_SetConfig+0x1cc>
 8003498:	2300      	movs	r3, #0
 800349a:	76fb      	strb	r3, [r7, #27]
 800349c:	e063      	b.n	8003566 <UART_SetConfig+0x282>
 800349e:	2302      	movs	r3, #2
 80034a0:	76fb      	strb	r3, [r7, #27]
 80034a2:	e060      	b.n	8003566 <UART_SetConfig+0x282>
 80034a4:	2304      	movs	r3, #4
 80034a6:	76fb      	strb	r3, [r7, #27]
 80034a8:	e05d      	b.n	8003566 <UART_SetConfig+0x282>
 80034aa:	2308      	movs	r3, #8
 80034ac:	76fb      	strb	r3, [r7, #27]
 80034ae:	e05a      	b.n	8003566 <UART_SetConfig+0x282>
 80034b0:	2310      	movs	r3, #16
 80034b2:	76fb      	strb	r3, [r7, #27]
 80034b4:	e057      	b.n	8003566 <UART_SetConfig+0x282>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a49      	ldr	r2, [pc, #292]	; (80035e0 <UART_SetConfig+0x2fc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d125      	bne.n	800350c <UART_SetConfig+0x228>
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <UART_SetConfig+0x2ec>)
 80034c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034ce:	d017      	beq.n	8003500 <UART_SetConfig+0x21c>
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d817      	bhi.n	8003506 <UART_SetConfig+0x222>
 80034d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034da:	d00b      	beq.n	80034f4 <UART_SetConfig+0x210>
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d811      	bhi.n	8003506 <UART_SetConfig+0x222>
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <UART_SetConfig+0x20a>
 80034e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ea:	d006      	beq.n	80034fa <UART_SetConfig+0x216>
 80034ec:	e00b      	b.n	8003506 <UART_SetConfig+0x222>
 80034ee:	2300      	movs	r3, #0
 80034f0:	76fb      	strb	r3, [r7, #27]
 80034f2:	e038      	b.n	8003566 <UART_SetConfig+0x282>
 80034f4:	2302      	movs	r3, #2
 80034f6:	76fb      	strb	r3, [r7, #27]
 80034f8:	e035      	b.n	8003566 <UART_SetConfig+0x282>
 80034fa:	2304      	movs	r3, #4
 80034fc:	76fb      	strb	r3, [r7, #27]
 80034fe:	e032      	b.n	8003566 <UART_SetConfig+0x282>
 8003500:	2308      	movs	r3, #8
 8003502:	76fb      	strb	r3, [r7, #27]
 8003504:	e02f      	b.n	8003566 <UART_SetConfig+0x282>
 8003506:	2310      	movs	r3, #16
 8003508:	76fb      	strb	r3, [r7, #27]
 800350a:	e02c      	b.n	8003566 <UART_SetConfig+0x282>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a2d      	ldr	r2, [pc, #180]	; (80035c8 <UART_SetConfig+0x2e4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d125      	bne.n	8003562 <UART_SetConfig+0x27e>
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <UART_SetConfig+0x2ec>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003524:	d017      	beq.n	8003556 <UART_SetConfig+0x272>
 8003526:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800352a:	d817      	bhi.n	800355c <UART_SetConfig+0x278>
 800352c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003530:	d00b      	beq.n	800354a <UART_SetConfig+0x266>
 8003532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003536:	d811      	bhi.n	800355c <UART_SetConfig+0x278>
 8003538:	2b00      	cmp	r3, #0
 800353a:	d003      	beq.n	8003544 <UART_SetConfig+0x260>
 800353c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003540:	d006      	beq.n	8003550 <UART_SetConfig+0x26c>
 8003542:	e00b      	b.n	800355c <UART_SetConfig+0x278>
 8003544:	2300      	movs	r3, #0
 8003546:	76fb      	strb	r3, [r7, #27]
 8003548:	e00d      	b.n	8003566 <UART_SetConfig+0x282>
 800354a:	2302      	movs	r3, #2
 800354c:	76fb      	strb	r3, [r7, #27]
 800354e:	e00a      	b.n	8003566 <UART_SetConfig+0x282>
 8003550:	2304      	movs	r3, #4
 8003552:	76fb      	strb	r3, [r7, #27]
 8003554:	e007      	b.n	8003566 <UART_SetConfig+0x282>
 8003556:	2308      	movs	r3, #8
 8003558:	76fb      	strb	r3, [r7, #27]
 800355a:	e004      	b.n	8003566 <UART_SetConfig+0x282>
 800355c:	2310      	movs	r3, #16
 800355e:	76fb      	strb	r3, [r7, #27]
 8003560:	e001      	b.n	8003566 <UART_SetConfig+0x282>
 8003562:	2310      	movs	r3, #16
 8003564:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <UART_SetConfig+0x2e4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	f040 8087 	bne.w	8003680 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003572:	7efb      	ldrb	r3, [r7, #27]
 8003574:	2b08      	cmp	r3, #8
 8003576:	d837      	bhi.n	80035e8 <UART_SetConfig+0x304>
 8003578:	a201      	add	r2, pc, #4	; (adr r2, 8003580 <UART_SetConfig+0x29c>)
 800357a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800357e:	bf00      	nop
 8003580:	080035a5 	.word	0x080035a5
 8003584:	080035e9 	.word	0x080035e9
 8003588:	080035ad 	.word	0x080035ad
 800358c:	080035e9 	.word	0x080035e9
 8003590:	080035b3 	.word	0x080035b3
 8003594:	080035e9 	.word	0x080035e9
 8003598:	080035e9 	.word	0x080035e9
 800359c:	080035e9 	.word	0x080035e9
 80035a0:	080035bb 	.word	0x080035bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7ff f908 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 80035a8:	6178      	str	r0, [r7, #20]
        break;
 80035aa:	e022      	b.n	80035f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b0d      	ldr	r3, [pc, #52]	; (80035e4 <UART_SetConfig+0x300>)
 80035ae:	617b      	str	r3, [r7, #20]
        break;
 80035b0:	e01f      	b.n	80035f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b2:	f7ff f869 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 80035b6:	6178      	str	r0, [r7, #20]
        break;
 80035b8:	e01b      	b.n	80035f2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035be:	617b      	str	r3, [r7, #20]
        break;
 80035c0:	e017      	b.n	80035f2 <UART_SetConfig+0x30e>
 80035c2:	bf00      	nop
 80035c4:	efff69f3 	.word	0xefff69f3
 80035c8:	40008000 	.word	0x40008000
 80035cc:	40013800 	.word	0x40013800
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40004400 	.word	0x40004400
 80035d8:	40004800 	.word	0x40004800
 80035dc:	40004c00 	.word	0x40004c00
 80035e0:	40005000 	.word	0x40005000
 80035e4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	76bb      	strb	r3, [r7, #26]
        break;
 80035f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 80f1 	beq.w	80037dc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	4413      	add	r3, r2
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	429a      	cmp	r2, r3
 8003608:	d305      	bcc.n	8003616 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	429a      	cmp	r2, r3
 8003614:	d902      	bls.n	800361c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	76bb      	strb	r3, [r7, #26]
 800361a:	e0df      	b.n	80037dc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	4618      	mov	r0, r3
 8003620:	f04f 0100 	mov.w	r1, #0
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	020b      	lsls	r3, r1, #8
 800362e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003632:	0202      	lsls	r2, r0, #8
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	6849      	ldr	r1, [r1, #4]
 8003638:	0849      	lsrs	r1, r1, #1
 800363a:	4608      	mov	r0, r1
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	1814      	adds	r4, r2, r0
 8003642:	eb43 0501 	adc.w	r5, r3, r1
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	461a      	mov	r2, r3
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	4620      	mov	r0, r4
 8003652:	4629      	mov	r1, r5
 8003654:	f7fc fe14 	bl	8000280 <__aeabi_uldivmod>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4613      	mov	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003666:	d308      	bcc.n	800367a <UART_SetConfig+0x396>
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366e:	d204      	bcs.n	800367a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	60da      	str	r2, [r3, #12]
 8003678:	e0b0      	b.n	80037dc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	76bb      	strb	r3, [r7, #26]
 800367e:	e0ad      	b.n	80037dc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003688:	d15c      	bne.n	8003744 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800368a:	7efb      	ldrb	r3, [r7, #27]
 800368c:	2b08      	cmp	r3, #8
 800368e:	d828      	bhi.n	80036e2 <UART_SetConfig+0x3fe>
 8003690:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0x3b4>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036bd 	.word	0x080036bd
 800369c:	080036c5 	.word	0x080036c5
 80036a0:	080036cd 	.word	0x080036cd
 80036a4:	080036e3 	.word	0x080036e3
 80036a8:	080036d3 	.word	0x080036d3
 80036ac:	080036e3 	.word	0x080036e3
 80036b0:	080036e3 	.word	0x080036e3
 80036b4:	080036e3 	.word	0x080036e3
 80036b8:	080036db 	.word	0x080036db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036bc:	f7ff f87c 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 80036c0:	6178      	str	r0, [r7, #20]
        break;
 80036c2:	e013      	b.n	80036ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c4:	f7ff f88e 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 80036c8:	6178      	str	r0, [r7, #20]
        break;
 80036ca:	e00f      	b.n	80036ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036cc:	4b49      	ldr	r3, [pc, #292]	; (80037f4 <UART_SetConfig+0x510>)
 80036ce:	617b      	str	r3, [r7, #20]
        break;
 80036d0:	e00c      	b.n	80036ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d2:	f7fe ffd9 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 80036d6:	6178      	str	r0, [r7, #20]
        break;
 80036d8:	e008      	b.n	80036ec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036de:	617b      	str	r3, [r7, #20]
        break;
 80036e0:	e004      	b.n	80036ec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	76bb      	strb	r3, [r7, #26]
        break;
 80036ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d074      	beq.n	80037dc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005a      	lsls	r2, r3, #1
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	085b      	lsrs	r3, r3, #1
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	b29b      	uxth	r3, r3
 8003708:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	2b0f      	cmp	r3, #15
 800370e:	d916      	bls.n	800373e <UART_SetConfig+0x45a>
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003716:	d212      	bcs.n	800373e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	b29b      	uxth	r3, r3
 800371c:	f023 030f 	bic.w	r3, r3, #15
 8003720:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	f003 0307 	and.w	r3, r3, #7
 800372c:	b29a      	uxth	r2, r3
 800372e:	89fb      	ldrh	r3, [r7, #14]
 8003730:	4313      	orrs	r3, r2
 8003732:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	89fa      	ldrh	r2, [r7, #14]
 800373a:	60da      	str	r2, [r3, #12]
 800373c:	e04e      	b.n	80037dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	76bb      	strb	r3, [r7, #26]
 8003742:	e04b      	b.n	80037dc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003744:	7efb      	ldrb	r3, [r7, #27]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d827      	bhi.n	800379a <UART_SetConfig+0x4b6>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <UART_SetConfig+0x46c>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003775 	.word	0x08003775
 8003754:	0800377d 	.word	0x0800377d
 8003758:	08003785 	.word	0x08003785
 800375c:	0800379b 	.word	0x0800379b
 8003760:	0800378b 	.word	0x0800378b
 8003764:	0800379b 	.word	0x0800379b
 8003768:	0800379b 	.word	0x0800379b
 800376c:	0800379b 	.word	0x0800379b
 8003770:	08003793 	.word	0x08003793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003774:	f7ff f820 	bl	80027b8 <HAL_RCC_GetPCLK1Freq>
 8003778:	6178      	str	r0, [r7, #20]
        break;
 800377a:	e013      	b.n	80037a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800377c:	f7ff f832 	bl	80027e4 <HAL_RCC_GetPCLK2Freq>
 8003780:	6178      	str	r0, [r7, #20]
        break;
 8003782:	e00f      	b.n	80037a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <UART_SetConfig+0x510>)
 8003786:	617b      	str	r3, [r7, #20]
        break;
 8003788:	e00c      	b.n	80037a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800378a:	f7fe ff7d 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 800378e:	6178      	str	r0, [r7, #20]
        break;
 8003790:	e008      	b.n	80037a4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003796:	617b      	str	r3, [r7, #20]
        break;
 8003798:	e004      	b.n	80037a4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	76bb      	strb	r3, [r7, #26]
        break;
 80037a2:	bf00      	nop
    }

    if (pclk != 0U)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d018      	beq.n	80037dc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	085a      	lsrs	r2, r3, #1
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	441a      	add	r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	b29b      	uxth	r3, r3
 80037be:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d908      	bls.n	80037d8 <UART_SetConfig+0x4f4>
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037cc:	d204      	bcs.n	80037d8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e001      	b.n	80037dc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80037e8:	7ebb      	ldrb	r3, [r7, #26]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3720      	adds	r7, #32
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdb0      	pop	{r4, r5, r7, pc}
 80037f2:	bf00      	nop
 80037f4:	00f42400 	.word	0x00f42400

080037f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	430a      	orrs	r2, r1
 8003842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0320 	and.w	r3, r3, #32
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01a      	beq.n	800390e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038f6:	d10a      	bne.n	800390e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr

0800393c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800394c:	f7fd fe6c 	bl	8001628 <HAL_GetTick>
 8003950:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b08      	cmp	r3, #8
 800395e:	d10e      	bne.n	800397e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003960:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f82d 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e023      	b.n	80039c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b04      	cmp	r3, #4
 800398a:	d10e      	bne.n	80039aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800398c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f817 	bl	80039ce <UART_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e00d      	b.n	80039c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	603b      	str	r3, [r7, #0]
 80039da:	4613      	mov	r3, r2
 80039dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039de:	e05e      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e6:	d05a      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e8:	f7fd fe1e 	bl	8001628 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <UART_WaitOnFlagUntilTimeout+0x30>
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d11b      	bne.n	8003a36 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a0c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e043      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d02c      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a52:	d124      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a6c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689a      	ldr	r2, [r3, #8]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2220      	movs	r2, #32
 8003a88:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69da      	ldr	r2, [r3, #28]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d091      	beq.n	80039e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <atoi>:
 8003ac6:	220a      	movs	r2, #10
 8003ac8:	2100      	movs	r1, #0
 8003aca:	f000 b92b 	b.w	8003d24 <strtol>
	...

08003ad0 <__errno>:
 8003ad0:	4b01      	ldr	r3, [pc, #4]	; (8003ad8 <__errno+0x8>)
 8003ad2:	6818      	ldr	r0, [r3, #0]
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000158 	.word	0x20000158

08003adc <__libc_init_array>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	4d0d      	ldr	r5, [pc, #52]	; (8003b14 <__libc_init_array+0x38>)
 8003ae0:	4c0d      	ldr	r4, [pc, #52]	; (8003b18 <__libc_init_array+0x3c>)
 8003ae2:	1b64      	subs	r4, r4, r5
 8003ae4:	10a4      	asrs	r4, r4, #2
 8003ae6:	2600      	movs	r6, #0
 8003ae8:	42a6      	cmp	r6, r4
 8003aea:	d109      	bne.n	8003b00 <__libc_init_array+0x24>
 8003aec:	4d0b      	ldr	r5, [pc, #44]	; (8003b1c <__libc_init_array+0x40>)
 8003aee:	4c0c      	ldr	r4, [pc, #48]	; (8003b20 <__libc_init_array+0x44>)
 8003af0:	f001 f8e4 	bl	8004cbc <_init>
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	2600      	movs	r6, #0
 8003afa:	42a6      	cmp	r6, r4
 8003afc:	d105      	bne.n	8003b0a <__libc_init_array+0x2e>
 8003afe:	bd70      	pop	{r4, r5, r6, pc}
 8003b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b04:	4798      	blx	r3
 8003b06:	3601      	adds	r6, #1
 8003b08:	e7ee      	b.n	8003ae8 <__libc_init_array+0xc>
 8003b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b0e:	4798      	blx	r3
 8003b10:	3601      	adds	r6, #1
 8003b12:	e7f2      	b.n	8003afa <__libc_init_array+0x1e>
 8003b14:	08005108 	.word	0x08005108
 8003b18:	08005108 	.word	0x08005108
 8003b1c:	08005108 	.word	0x08005108
 8003b20:	0800510c 	.word	0x0800510c

08003b24 <memset>:
 8003b24:	4402      	add	r2, r0
 8003b26:	4603      	mov	r3, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <strstr>:
 8003b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b36:	780c      	ldrb	r4, [r1, #0]
 8003b38:	b164      	cbz	r4, 8003b54 <strstr+0x20>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	781a      	ldrb	r2, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	1c5e      	adds	r6, r3, #1
 8003b42:	b90a      	cbnz	r2, 8003b48 <strstr+0x14>
 8003b44:	4610      	mov	r0, r2
 8003b46:	e005      	b.n	8003b54 <strstr+0x20>
 8003b48:	4294      	cmp	r4, r2
 8003b4a:	d108      	bne.n	8003b5e <strstr+0x2a>
 8003b4c:	460d      	mov	r5, r1
 8003b4e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003b52:	b902      	cbnz	r2, 8003b56 <strstr+0x22>
 8003b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b56:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003b5a:	4297      	cmp	r7, r2
 8003b5c:	d0f7      	beq.n	8003b4e <strstr+0x1a>
 8003b5e:	4633      	mov	r3, r6
 8003b60:	e7ec      	b.n	8003b3c <strstr+0x8>
	...

08003b64 <strtok>:
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <strtok+0x5c>)
 8003b66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b68:	681e      	ldr	r6, [r3, #0]
 8003b6a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	b9fc      	cbnz	r4, 8003bb0 <strtok+0x4c>
 8003b70:	2050      	movs	r0, #80	; 0x50
 8003b72:	9101      	str	r1, [sp, #4]
 8003b74:	f000 f910 	bl	8003d98 <malloc>
 8003b78:	9901      	ldr	r1, [sp, #4]
 8003b7a:	65b0      	str	r0, [r6, #88]	; 0x58
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	b920      	cbnz	r0, 8003b8a <strtok+0x26>
 8003b80:	4b10      	ldr	r3, [pc, #64]	; (8003bc4 <strtok+0x60>)
 8003b82:	4811      	ldr	r0, [pc, #68]	; (8003bc8 <strtok+0x64>)
 8003b84:	2157      	movs	r1, #87	; 0x57
 8003b86:	f000 f8d7 	bl	8003d38 <__assert_func>
 8003b8a:	e9c0 4400 	strd	r4, r4, [r0]
 8003b8e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003b92:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003b96:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003b9a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003b9e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ba2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003ba6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003baa:	6184      	str	r4, [r0, #24]
 8003bac:	7704      	strb	r4, [r0, #28]
 8003bae:	6244      	str	r4, [r0, #36]	; 0x24
 8003bb0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	b002      	add	sp, #8
 8003bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003bbc:	f000 b806 	b.w	8003bcc <__strtok_r>
 8003bc0:	20000158 	.word	0x20000158
 8003bc4:	08004eb8 	.word	0x08004eb8
 8003bc8:	08004ecf 	.word	0x08004ecf

08003bcc <__strtok_r>:
 8003bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bce:	b908      	cbnz	r0, 8003bd4 <__strtok_r+0x8>
 8003bd0:	6810      	ldr	r0, [r2, #0]
 8003bd2:	b188      	cbz	r0, 8003bf8 <__strtok_r+0x2c>
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003bdc:	460f      	mov	r7, r1
 8003bde:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003be2:	b91e      	cbnz	r6, 8003bec <__strtok_r+0x20>
 8003be4:	b965      	cbnz	r5, 8003c00 <__strtok_r+0x34>
 8003be6:	6015      	str	r5, [r2, #0]
 8003be8:	4628      	mov	r0, r5
 8003bea:	e005      	b.n	8003bf8 <__strtok_r+0x2c>
 8003bec:	42b5      	cmp	r5, r6
 8003bee:	d1f6      	bne.n	8003bde <__strtok_r+0x12>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <__strtok_r+0xa>
 8003bf4:	6014      	str	r4, [r2, #0]
 8003bf6:	7003      	strb	r3, [r0, #0]
 8003bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfa:	461c      	mov	r4, r3
 8003bfc:	e00c      	b.n	8003c18 <__strtok_r+0x4c>
 8003bfe:	b915      	cbnz	r5, 8003c06 <__strtok_r+0x3a>
 8003c00:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003c04:	460e      	mov	r6, r1
 8003c06:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003c0a:	42ab      	cmp	r3, r5
 8003c0c:	d1f7      	bne.n	8003bfe <__strtok_r+0x32>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f3      	beq.n	8003bfa <__strtok_r+0x2e>
 8003c12:	2300      	movs	r3, #0
 8003c14:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003c18:	6014      	str	r4, [r2, #0]
 8003c1a:	e7ed      	b.n	8003bf8 <__strtok_r+0x2c>

08003c1c <_strtol_l.isra.0>:
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c22:	d001      	beq.n	8003c28 <_strtol_l.isra.0+0xc>
 8003c24:	2b24      	cmp	r3, #36	; 0x24
 8003c26:	d906      	bls.n	8003c36 <_strtol_l.isra.0+0x1a>
 8003c28:	f7ff ff52 	bl	8003ad0 <__errno>
 8003c2c:	2316      	movs	r3, #22
 8003c2e:	6003      	str	r3, [r0, #0]
 8003c30:	2000      	movs	r0, #0
 8003c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c36:	4f3a      	ldr	r7, [pc, #232]	; (8003d20 <_strtol_l.isra.0+0x104>)
 8003c38:	468e      	mov	lr, r1
 8003c3a:	4676      	mov	r6, lr
 8003c3c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003c40:	5de5      	ldrb	r5, [r4, r7]
 8003c42:	f015 0508 	ands.w	r5, r5, #8
 8003c46:	d1f8      	bne.n	8003c3a <_strtol_l.isra.0+0x1e>
 8003c48:	2c2d      	cmp	r4, #45	; 0x2d
 8003c4a:	d134      	bne.n	8003cb6 <_strtol_l.isra.0+0x9a>
 8003c4c:	f89e 4000 	ldrb.w	r4, [lr]
 8003c50:	f04f 0801 	mov.w	r8, #1
 8003c54:	f106 0e02 	add.w	lr, r6, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05c      	beq.n	8003d16 <_strtol_l.isra.0+0xfa>
 8003c5c:	2b10      	cmp	r3, #16
 8003c5e:	d10c      	bne.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003c60:	2c30      	cmp	r4, #48	; 0x30
 8003c62:	d10a      	bne.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003c64:	f89e 4000 	ldrb.w	r4, [lr]
 8003c68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003c6c:	2c58      	cmp	r4, #88	; 0x58
 8003c6e:	d14d      	bne.n	8003d0c <_strtol_l.isra.0+0xf0>
 8003c70:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8003c74:	2310      	movs	r3, #16
 8003c76:	f10e 0e02 	add.w	lr, lr, #2
 8003c7a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8003c7e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003c82:	2600      	movs	r6, #0
 8003c84:	fbbc f9f3 	udiv	r9, ip, r3
 8003c88:	4635      	mov	r5, r6
 8003c8a:	fb03 ca19 	mls	sl, r3, r9, ip
 8003c8e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003c92:	2f09      	cmp	r7, #9
 8003c94:	d818      	bhi.n	8003cc8 <_strtol_l.isra.0+0xac>
 8003c96:	463c      	mov	r4, r7
 8003c98:	42a3      	cmp	r3, r4
 8003c9a:	dd24      	ble.n	8003ce6 <_strtol_l.isra.0+0xca>
 8003c9c:	2e00      	cmp	r6, #0
 8003c9e:	db1f      	blt.n	8003ce0 <_strtol_l.isra.0+0xc4>
 8003ca0:	45a9      	cmp	r9, r5
 8003ca2:	d31d      	bcc.n	8003ce0 <_strtol_l.isra.0+0xc4>
 8003ca4:	d101      	bne.n	8003caa <_strtol_l.isra.0+0x8e>
 8003ca6:	45a2      	cmp	sl, r4
 8003ca8:	db1a      	blt.n	8003ce0 <_strtol_l.isra.0+0xc4>
 8003caa:	fb05 4503 	mla	r5, r5, r3, r4
 8003cae:	2601      	movs	r6, #1
 8003cb0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003cb4:	e7eb      	b.n	8003c8e <_strtol_l.isra.0+0x72>
 8003cb6:	2c2b      	cmp	r4, #43	; 0x2b
 8003cb8:	bf08      	it	eq
 8003cba:	f89e 4000 	ldrbeq.w	r4, [lr]
 8003cbe:	46a8      	mov	r8, r5
 8003cc0:	bf08      	it	eq
 8003cc2:	f106 0e02 	addeq.w	lr, r6, #2
 8003cc6:	e7c7      	b.n	8003c58 <_strtol_l.isra.0+0x3c>
 8003cc8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003ccc:	2f19      	cmp	r7, #25
 8003cce:	d801      	bhi.n	8003cd4 <_strtol_l.isra.0+0xb8>
 8003cd0:	3c37      	subs	r4, #55	; 0x37
 8003cd2:	e7e1      	b.n	8003c98 <_strtol_l.isra.0+0x7c>
 8003cd4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003cd8:	2f19      	cmp	r7, #25
 8003cda:	d804      	bhi.n	8003ce6 <_strtol_l.isra.0+0xca>
 8003cdc:	3c57      	subs	r4, #87	; 0x57
 8003cde:	e7db      	b.n	8003c98 <_strtol_l.isra.0+0x7c>
 8003ce0:	f04f 36ff 	mov.w	r6, #4294967295
 8003ce4:	e7e4      	b.n	8003cb0 <_strtol_l.isra.0+0x94>
 8003ce6:	2e00      	cmp	r6, #0
 8003ce8:	da05      	bge.n	8003cf6 <_strtol_l.isra.0+0xda>
 8003cea:	2322      	movs	r3, #34	; 0x22
 8003cec:	6003      	str	r3, [r0, #0]
 8003cee:	4665      	mov	r5, ip
 8003cf0:	b942      	cbnz	r2, 8003d04 <_strtol_l.isra.0+0xe8>
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	e79d      	b.n	8003c32 <_strtol_l.isra.0+0x16>
 8003cf6:	f1b8 0f00 	cmp.w	r8, #0
 8003cfa:	d000      	beq.n	8003cfe <_strtol_l.isra.0+0xe2>
 8003cfc:	426d      	negs	r5, r5
 8003cfe:	2a00      	cmp	r2, #0
 8003d00:	d0f7      	beq.n	8003cf2 <_strtol_l.isra.0+0xd6>
 8003d02:	b10e      	cbz	r6, 8003d08 <_strtol_l.isra.0+0xec>
 8003d04:	f10e 31ff 	add.w	r1, lr, #4294967295
 8003d08:	6011      	str	r1, [r2, #0]
 8003d0a:	e7f2      	b.n	8003cf2 <_strtol_l.isra.0+0xd6>
 8003d0c:	2430      	movs	r4, #48	; 0x30
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1b3      	bne.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003d12:	2308      	movs	r3, #8
 8003d14:	e7b1      	b.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003d16:	2c30      	cmp	r4, #48	; 0x30
 8003d18:	d0a4      	beq.n	8003c64 <_strtol_l.isra.0+0x48>
 8003d1a:	230a      	movs	r3, #10
 8003d1c:	e7ad      	b.n	8003c7a <_strtol_l.isra.0+0x5e>
 8003d1e:	bf00      	nop
 8003d20:	08004f6d 	.word	0x08004f6d

08003d24 <strtol>:
 8003d24:	4613      	mov	r3, r2
 8003d26:	460a      	mov	r2, r1
 8003d28:	4601      	mov	r1, r0
 8003d2a:	4802      	ldr	r0, [pc, #8]	; (8003d34 <strtol+0x10>)
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f7ff bf75 	b.w	8003c1c <_strtol_l.isra.0>
 8003d32:	bf00      	nop
 8003d34:	20000158 	.word	0x20000158

08003d38 <__assert_func>:
 8003d38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <__assert_func+0x2c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4605      	mov	r5, r0
 8003d44:	68d8      	ldr	r0, [r3, #12]
 8003d46:	b14c      	cbz	r4, 8003d5c <__assert_func+0x24>
 8003d48:	4b07      	ldr	r3, [pc, #28]	; (8003d68 <__assert_func+0x30>)
 8003d4a:	9100      	str	r1, [sp, #0]
 8003d4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003d50:	4906      	ldr	r1, [pc, #24]	; (8003d6c <__assert_func+0x34>)
 8003d52:	462b      	mov	r3, r5
 8003d54:	f000 f80e 	bl	8003d74 <fiprintf>
 8003d58:	f000 fc8e 	bl	8004678 <abort>
 8003d5c:	4b04      	ldr	r3, [pc, #16]	; (8003d70 <__assert_func+0x38>)
 8003d5e:	461c      	mov	r4, r3
 8003d60:	e7f3      	b.n	8003d4a <__assert_func+0x12>
 8003d62:	bf00      	nop
 8003d64:	20000158 	.word	0x20000158
 8003d68:	08004f30 	.word	0x08004f30
 8003d6c:	08004f3d 	.word	0x08004f3d
 8003d70:	08004f6b 	.word	0x08004f6b

08003d74 <fiprintf>:
 8003d74:	b40e      	push	{r1, r2, r3}
 8003d76:	b503      	push	{r0, r1, lr}
 8003d78:	4601      	mov	r1, r0
 8003d7a:	ab03      	add	r3, sp, #12
 8003d7c:	4805      	ldr	r0, [pc, #20]	; (8003d94 <fiprintf+0x20>)
 8003d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d82:	6800      	ldr	r0, [r0, #0]
 8003d84:	9301      	str	r3, [sp, #4]
 8003d86:	f000 f8e3 	bl	8003f50 <_vfiprintf_r>
 8003d8a:	b002      	add	sp, #8
 8003d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d90:	b003      	add	sp, #12
 8003d92:	4770      	bx	lr
 8003d94:	20000158 	.word	0x20000158

08003d98 <malloc>:
 8003d98:	4b02      	ldr	r3, [pc, #8]	; (8003da4 <malloc+0xc>)
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	f000 b853 	b.w	8003e48 <_malloc_r>
 8003da2:	bf00      	nop
 8003da4:	20000158 	.word	0x20000158

08003da8 <_free_r>:
 8003da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003daa:	2900      	cmp	r1, #0
 8003dac:	d048      	beq.n	8003e40 <_free_r+0x98>
 8003dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db2:	9001      	str	r0, [sp, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f1a1 0404 	sub.w	r4, r1, #4
 8003dba:	bfb8      	it	lt
 8003dbc:	18e4      	addlt	r4, r4, r3
 8003dbe:	f000 fe81 	bl	8004ac4 <__malloc_lock>
 8003dc2:	4a20      	ldr	r2, [pc, #128]	; (8003e44 <_free_r+0x9c>)
 8003dc4:	9801      	ldr	r0, [sp, #4]
 8003dc6:	6813      	ldr	r3, [r2, #0]
 8003dc8:	4615      	mov	r5, r2
 8003dca:	b933      	cbnz	r3, 8003dda <_free_r+0x32>
 8003dcc:	6063      	str	r3, [r4, #4]
 8003dce:	6014      	str	r4, [r2, #0]
 8003dd0:	b003      	add	sp, #12
 8003dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003dd6:	f000 be7b 	b.w	8004ad0 <__malloc_unlock>
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	d90b      	bls.n	8003df6 <_free_r+0x4e>
 8003dde:	6821      	ldr	r1, [r4, #0]
 8003de0:	1862      	adds	r2, r4, r1
 8003de2:	4293      	cmp	r3, r2
 8003de4:	bf04      	itt	eq
 8003de6:	681a      	ldreq	r2, [r3, #0]
 8003de8:	685b      	ldreq	r3, [r3, #4]
 8003dea:	6063      	str	r3, [r4, #4]
 8003dec:	bf04      	itt	eq
 8003dee:	1852      	addeq	r2, r2, r1
 8003df0:	6022      	streq	r2, [r4, #0]
 8003df2:	602c      	str	r4, [r5, #0]
 8003df4:	e7ec      	b.n	8003dd0 <_free_r+0x28>
 8003df6:	461a      	mov	r2, r3
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b10b      	cbz	r3, 8003e00 <_free_r+0x58>
 8003dfc:	42a3      	cmp	r3, r4
 8003dfe:	d9fa      	bls.n	8003df6 <_free_r+0x4e>
 8003e00:	6811      	ldr	r1, [r2, #0]
 8003e02:	1855      	adds	r5, r2, r1
 8003e04:	42a5      	cmp	r5, r4
 8003e06:	d10b      	bne.n	8003e20 <_free_r+0x78>
 8003e08:	6824      	ldr	r4, [r4, #0]
 8003e0a:	4421      	add	r1, r4
 8003e0c:	1854      	adds	r4, r2, r1
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	6011      	str	r1, [r2, #0]
 8003e12:	d1dd      	bne.n	8003dd0 <_free_r+0x28>
 8003e14:	681c      	ldr	r4, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	6053      	str	r3, [r2, #4]
 8003e1a:	4421      	add	r1, r4
 8003e1c:	6011      	str	r1, [r2, #0]
 8003e1e:	e7d7      	b.n	8003dd0 <_free_r+0x28>
 8003e20:	d902      	bls.n	8003e28 <_free_r+0x80>
 8003e22:	230c      	movs	r3, #12
 8003e24:	6003      	str	r3, [r0, #0]
 8003e26:	e7d3      	b.n	8003dd0 <_free_r+0x28>
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	1961      	adds	r1, r4, r5
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	bf04      	itt	eq
 8003e30:	6819      	ldreq	r1, [r3, #0]
 8003e32:	685b      	ldreq	r3, [r3, #4]
 8003e34:	6063      	str	r3, [r4, #4]
 8003e36:	bf04      	itt	eq
 8003e38:	1949      	addeq	r1, r1, r5
 8003e3a:	6021      	streq	r1, [r4, #0]
 8003e3c:	6054      	str	r4, [r2, #4]
 8003e3e:	e7c7      	b.n	8003dd0 <_free_r+0x28>
 8003e40:	b003      	add	sp, #12
 8003e42:	bd30      	pop	{r4, r5, pc}
 8003e44:	200001e0 	.word	0x200001e0

08003e48 <_malloc_r>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	1ccd      	adds	r5, r1, #3
 8003e4c:	f025 0503 	bic.w	r5, r5, #3
 8003e50:	3508      	adds	r5, #8
 8003e52:	2d0c      	cmp	r5, #12
 8003e54:	bf38      	it	cc
 8003e56:	250c      	movcc	r5, #12
 8003e58:	2d00      	cmp	r5, #0
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	db01      	blt.n	8003e62 <_malloc_r+0x1a>
 8003e5e:	42a9      	cmp	r1, r5
 8003e60:	d903      	bls.n	8003e6a <_malloc_r+0x22>
 8003e62:	230c      	movs	r3, #12
 8003e64:	6033      	str	r3, [r6, #0]
 8003e66:	2000      	movs	r0, #0
 8003e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6a:	f000 fe2b 	bl	8004ac4 <__malloc_lock>
 8003e6e:	4921      	ldr	r1, [pc, #132]	; (8003ef4 <_malloc_r+0xac>)
 8003e70:	680a      	ldr	r2, [r1, #0]
 8003e72:	4614      	mov	r4, r2
 8003e74:	b99c      	cbnz	r4, 8003e9e <_malloc_r+0x56>
 8003e76:	4f20      	ldr	r7, [pc, #128]	; (8003ef8 <_malloc_r+0xb0>)
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	b923      	cbnz	r3, 8003e86 <_malloc_r+0x3e>
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4630      	mov	r0, r6
 8003e80:	f000 fb2a 	bl	80044d8 <_sbrk_r>
 8003e84:	6038      	str	r0, [r7, #0]
 8003e86:	4629      	mov	r1, r5
 8003e88:	4630      	mov	r0, r6
 8003e8a:	f000 fb25 	bl	80044d8 <_sbrk_r>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d123      	bne.n	8003eda <_malloc_r+0x92>
 8003e92:	230c      	movs	r3, #12
 8003e94:	6033      	str	r3, [r6, #0]
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 fe1a 	bl	8004ad0 <__malloc_unlock>
 8003e9c:	e7e3      	b.n	8003e66 <_malloc_r+0x1e>
 8003e9e:	6823      	ldr	r3, [r4, #0]
 8003ea0:	1b5b      	subs	r3, r3, r5
 8003ea2:	d417      	bmi.n	8003ed4 <_malloc_r+0x8c>
 8003ea4:	2b0b      	cmp	r3, #11
 8003ea6:	d903      	bls.n	8003eb0 <_malloc_r+0x68>
 8003ea8:	6023      	str	r3, [r4, #0]
 8003eaa:	441c      	add	r4, r3
 8003eac:	6025      	str	r5, [r4, #0]
 8003eae:	e004      	b.n	8003eba <_malloc_r+0x72>
 8003eb0:	6863      	ldr	r3, [r4, #4]
 8003eb2:	42a2      	cmp	r2, r4
 8003eb4:	bf0c      	ite	eq
 8003eb6:	600b      	streq	r3, [r1, #0]
 8003eb8:	6053      	strne	r3, [r2, #4]
 8003eba:	4630      	mov	r0, r6
 8003ebc:	f000 fe08 	bl	8004ad0 <__malloc_unlock>
 8003ec0:	f104 000b 	add.w	r0, r4, #11
 8003ec4:	1d23      	adds	r3, r4, #4
 8003ec6:	f020 0007 	bic.w	r0, r0, #7
 8003eca:	1ac2      	subs	r2, r0, r3
 8003ecc:	d0cc      	beq.n	8003e68 <_malloc_r+0x20>
 8003ece:	1a1b      	subs	r3, r3, r0
 8003ed0:	50a3      	str	r3, [r4, r2]
 8003ed2:	e7c9      	b.n	8003e68 <_malloc_r+0x20>
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	6864      	ldr	r4, [r4, #4]
 8003ed8:	e7cc      	b.n	8003e74 <_malloc_r+0x2c>
 8003eda:	1cc4      	adds	r4, r0, #3
 8003edc:	f024 0403 	bic.w	r4, r4, #3
 8003ee0:	42a0      	cmp	r0, r4
 8003ee2:	d0e3      	beq.n	8003eac <_malloc_r+0x64>
 8003ee4:	1a21      	subs	r1, r4, r0
 8003ee6:	4630      	mov	r0, r6
 8003ee8:	f000 faf6 	bl	80044d8 <_sbrk_r>
 8003eec:	3001      	adds	r0, #1
 8003eee:	d1dd      	bne.n	8003eac <_malloc_r+0x64>
 8003ef0:	e7cf      	b.n	8003e92 <_malloc_r+0x4a>
 8003ef2:	bf00      	nop
 8003ef4:	200001e0 	.word	0x200001e0
 8003ef8:	200001e4 	.word	0x200001e4

08003efc <__sfputc_r>:
 8003efc:	6893      	ldr	r3, [r2, #8]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	b410      	push	{r4}
 8003f04:	6093      	str	r3, [r2, #8]
 8003f06:	da08      	bge.n	8003f1a <__sfputc_r+0x1e>
 8003f08:	6994      	ldr	r4, [r2, #24]
 8003f0a:	42a3      	cmp	r3, r4
 8003f0c:	db01      	blt.n	8003f12 <__sfputc_r+0x16>
 8003f0e:	290a      	cmp	r1, #10
 8003f10:	d103      	bne.n	8003f1a <__sfputc_r+0x1e>
 8003f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f16:	f000 baef 	b.w	80044f8 <__swbuf_r>
 8003f1a:	6813      	ldr	r3, [r2, #0]
 8003f1c:	1c58      	adds	r0, r3, #1
 8003f1e:	6010      	str	r0, [r2, #0]
 8003f20:	7019      	strb	r1, [r3, #0]
 8003f22:	4608      	mov	r0, r1
 8003f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <__sfputs_r>:
 8003f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f2c:	4606      	mov	r6, r0
 8003f2e:	460f      	mov	r7, r1
 8003f30:	4614      	mov	r4, r2
 8003f32:	18d5      	adds	r5, r2, r3
 8003f34:	42ac      	cmp	r4, r5
 8003f36:	d101      	bne.n	8003f3c <__sfputs_r+0x12>
 8003f38:	2000      	movs	r0, #0
 8003f3a:	e007      	b.n	8003f4c <__sfputs_r+0x22>
 8003f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f40:	463a      	mov	r2, r7
 8003f42:	4630      	mov	r0, r6
 8003f44:	f7ff ffda 	bl	8003efc <__sfputc_r>
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	d1f3      	bne.n	8003f34 <__sfputs_r+0xa>
 8003f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f50 <_vfiprintf_r>:
 8003f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f54:	460d      	mov	r5, r1
 8003f56:	b09d      	sub	sp, #116	; 0x74
 8003f58:	4614      	mov	r4, r2
 8003f5a:	4698      	mov	r8, r3
 8003f5c:	4606      	mov	r6, r0
 8003f5e:	b118      	cbz	r0, 8003f68 <_vfiprintf_r+0x18>
 8003f60:	6983      	ldr	r3, [r0, #24]
 8003f62:	b90b      	cbnz	r3, 8003f68 <_vfiprintf_r+0x18>
 8003f64:	f000 fcaa 	bl	80048bc <__sinit>
 8003f68:	4b89      	ldr	r3, [pc, #548]	; (8004190 <_vfiprintf_r+0x240>)
 8003f6a:	429d      	cmp	r5, r3
 8003f6c:	d11b      	bne.n	8003fa6 <_vfiprintf_r+0x56>
 8003f6e:	6875      	ldr	r5, [r6, #4]
 8003f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f72:	07d9      	lsls	r1, r3, #31
 8003f74:	d405      	bmi.n	8003f82 <_vfiprintf_r+0x32>
 8003f76:	89ab      	ldrh	r3, [r5, #12]
 8003f78:	059a      	lsls	r2, r3, #22
 8003f7a:	d402      	bmi.n	8003f82 <_vfiprintf_r+0x32>
 8003f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003f7e:	f000 fd3b 	bl	80049f8 <__retarget_lock_acquire_recursive>
 8003f82:	89ab      	ldrh	r3, [r5, #12]
 8003f84:	071b      	lsls	r3, r3, #28
 8003f86:	d501      	bpl.n	8003f8c <_vfiprintf_r+0x3c>
 8003f88:	692b      	ldr	r3, [r5, #16]
 8003f8a:	b9eb      	cbnz	r3, 8003fc8 <_vfiprintf_r+0x78>
 8003f8c:	4629      	mov	r1, r5
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f000 fb04 	bl	800459c <__swsetup_r>
 8003f94:	b1c0      	cbz	r0, 8003fc8 <_vfiprintf_r+0x78>
 8003f96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003f98:	07dc      	lsls	r4, r3, #31
 8003f9a:	d50e      	bpl.n	8003fba <_vfiprintf_r+0x6a>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	b01d      	add	sp, #116	; 0x74
 8003fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa6:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <_vfiprintf_r+0x244>)
 8003fa8:	429d      	cmp	r5, r3
 8003faa:	d101      	bne.n	8003fb0 <_vfiprintf_r+0x60>
 8003fac:	68b5      	ldr	r5, [r6, #8]
 8003fae:	e7df      	b.n	8003f70 <_vfiprintf_r+0x20>
 8003fb0:	4b79      	ldr	r3, [pc, #484]	; (8004198 <_vfiprintf_r+0x248>)
 8003fb2:	429d      	cmp	r5, r3
 8003fb4:	bf08      	it	eq
 8003fb6:	68f5      	ldreq	r5, [r6, #12]
 8003fb8:	e7da      	b.n	8003f70 <_vfiprintf_r+0x20>
 8003fba:	89ab      	ldrh	r3, [r5, #12]
 8003fbc:	0598      	lsls	r0, r3, #22
 8003fbe:	d4ed      	bmi.n	8003f9c <_vfiprintf_r+0x4c>
 8003fc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003fc2:	f000 fd1a 	bl	80049fa <__retarget_lock_release_recursive>
 8003fc6:	e7e9      	b.n	8003f9c <_vfiprintf_r+0x4c>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	9309      	str	r3, [sp, #36]	; 0x24
 8003fcc:	2320      	movs	r3, #32
 8003fce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003fd2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fd6:	2330      	movs	r3, #48	; 0x30
 8003fd8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800419c <_vfiprintf_r+0x24c>
 8003fdc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003fe0:	f04f 0901 	mov.w	r9, #1
 8003fe4:	4623      	mov	r3, r4
 8003fe6:	469a      	mov	sl, r3
 8003fe8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fec:	b10a      	cbz	r2, 8003ff2 <_vfiprintf_r+0xa2>
 8003fee:	2a25      	cmp	r2, #37	; 0x25
 8003ff0:	d1f9      	bne.n	8003fe6 <_vfiprintf_r+0x96>
 8003ff2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ff6:	d00b      	beq.n	8004010 <_vfiprintf_r+0xc0>
 8003ff8:	465b      	mov	r3, fp
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	4630      	mov	r0, r6
 8004000:	f7ff ff93 	bl	8003f2a <__sfputs_r>
 8004004:	3001      	adds	r0, #1
 8004006:	f000 80aa 	beq.w	800415e <_vfiprintf_r+0x20e>
 800400a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800400c:	445a      	add	r2, fp
 800400e:	9209      	str	r2, [sp, #36]	; 0x24
 8004010:	f89a 3000 	ldrb.w	r3, [sl]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a2 	beq.w	800415e <_vfiprintf_r+0x20e>
 800401a:	2300      	movs	r3, #0
 800401c:	f04f 32ff 	mov.w	r2, #4294967295
 8004020:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004024:	f10a 0a01 	add.w	sl, sl, #1
 8004028:	9304      	str	r3, [sp, #16]
 800402a:	9307      	str	r3, [sp, #28]
 800402c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004030:	931a      	str	r3, [sp, #104]	; 0x68
 8004032:	4654      	mov	r4, sl
 8004034:	2205      	movs	r2, #5
 8004036:	f814 1b01 	ldrb.w	r1, [r4], #1
 800403a:	4858      	ldr	r0, [pc, #352]	; (800419c <_vfiprintf_r+0x24c>)
 800403c:	f7fc f8d0 	bl	80001e0 <memchr>
 8004040:	9a04      	ldr	r2, [sp, #16]
 8004042:	b9d8      	cbnz	r0, 800407c <_vfiprintf_r+0x12c>
 8004044:	06d1      	lsls	r1, r2, #27
 8004046:	bf44      	itt	mi
 8004048:	2320      	movmi	r3, #32
 800404a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800404e:	0713      	lsls	r3, r2, #28
 8004050:	bf44      	itt	mi
 8004052:	232b      	movmi	r3, #43	; 0x2b
 8004054:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004058:	f89a 3000 	ldrb.w	r3, [sl]
 800405c:	2b2a      	cmp	r3, #42	; 0x2a
 800405e:	d015      	beq.n	800408c <_vfiprintf_r+0x13c>
 8004060:	9a07      	ldr	r2, [sp, #28]
 8004062:	4654      	mov	r4, sl
 8004064:	2000      	movs	r0, #0
 8004066:	f04f 0c0a 	mov.w	ip, #10
 800406a:	4621      	mov	r1, r4
 800406c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004070:	3b30      	subs	r3, #48	; 0x30
 8004072:	2b09      	cmp	r3, #9
 8004074:	d94e      	bls.n	8004114 <_vfiprintf_r+0x1c4>
 8004076:	b1b0      	cbz	r0, 80040a6 <_vfiprintf_r+0x156>
 8004078:	9207      	str	r2, [sp, #28]
 800407a:	e014      	b.n	80040a6 <_vfiprintf_r+0x156>
 800407c:	eba0 0308 	sub.w	r3, r0, r8
 8004080:	fa09 f303 	lsl.w	r3, r9, r3
 8004084:	4313      	orrs	r3, r2
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	46a2      	mov	sl, r4
 800408a:	e7d2      	b.n	8004032 <_vfiprintf_r+0xe2>
 800408c:	9b03      	ldr	r3, [sp, #12]
 800408e:	1d19      	adds	r1, r3, #4
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	9103      	str	r1, [sp, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	bfbb      	ittet	lt
 8004098:	425b      	neglt	r3, r3
 800409a:	f042 0202 	orrlt.w	r2, r2, #2
 800409e:	9307      	strge	r3, [sp, #28]
 80040a0:	9307      	strlt	r3, [sp, #28]
 80040a2:	bfb8      	it	lt
 80040a4:	9204      	strlt	r2, [sp, #16]
 80040a6:	7823      	ldrb	r3, [r4, #0]
 80040a8:	2b2e      	cmp	r3, #46	; 0x2e
 80040aa:	d10c      	bne.n	80040c6 <_vfiprintf_r+0x176>
 80040ac:	7863      	ldrb	r3, [r4, #1]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d135      	bne.n	800411e <_vfiprintf_r+0x1ce>
 80040b2:	9b03      	ldr	r3, [sp, #12]
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	9203      	str	r2, [sp, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfb8      	it	lt
 80040be:	f04f 33ff 	movlt.w	r3, #4294967295
 80040c2:	3402      	adds	r4, #2
 80040c4:	9305      	str	r3, [sp, #20]
 80040c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80041ac <_vfiprintf_r+0x25c>
 80040ca:	7821      	ldrb	r1, [r4, #0]
 80040cc:	2203      	movs	r2, #3
 80040ce:	4650      	mov	r0, sl
 80040d0:	f7fc f886 	bl	80001e0 <memchr>
 80040d4:	b140      	cbz	r0, 80040e8 <_vfiprintf_r+0x198>
 80040d6:	2340      	movs	r3, #64	; 0x40
 80040d8:	eba0 000a 	sub.w	r0, r0, sl
 80040dc:	fa03 f000 	lsl.w	r0, r3, r0
 80040e0:	9b04      	ldr	r3, [sp, #16]
 80040e2:	4303      	orrs	r3, r0
 80040e4:	3401      	adds	r4, #1
 80040e6:	9304      	str	r3, [sp, #16]
 80040e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ec:	482c      	ldr	r0, [pc, #176]	; (80041a0 <_vfiprintf_r+0x250>)
 80040ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80040f2:	2206      	movs	r2, #6
 80040f4:	f7fc f874 	bl	80001e0 <memchr>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d03f      	beq.n	800417c <_vfiprintf_r+0x22c>
 80040fc:	4b29      	ldr	r3, [pc, #164]	; (80041a4 <_vfiprintf_r+0x254>)
 80040fe:	bb1b      	cbnz	r3, 8004148 <_vfiprintf_r+0x1f8>
 8004100:	9b03      	ldr	r3, [sp, #12]
 8004102:	3307      	adds	r3, #7
 8004104:	f023 0307 	bic.w	r3, r3, #7
 8004108:	3308      	adds	r3, #8
 800410a:	9303      	str	r3, [sp, #12]
 800410c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410e:	443b      	add	r3, r7
 8004110:	9309      	str	r3, [sp, #36]	; 0x24
 8004112:	e767      	b.n	8003fe4 <_vfiprintf_r+0x94>
 8004114:	fb0c 3202 	mla	r2, ip, r2, r3
 8004118:	460c      	mov	r4, r1
 800411a:	2001      	movs	r0, #1
 800411c:	e7a5      	b.n	800406a <_vfiprintf_r+0x11a>
 800411e:	2300      	movs	r3, #0
 8004120:	3401      	adds	r4, #1
 8004122:	9305      	str	r3, [sp, #20]
 8004124:	4619      	mov	r1, r3
 8004126:	f04f 0c0a 	mov.w	ip, #10
 800412a:	4620      	mov	r0, r4
 800412c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004130:	3a30      	subs	r2, #48	; 0x30
 8004132:	2a09      	cmp	r2, #9
 8004134:	d903      	bls.n	800413e <_vfiprintf_r+0x1ee>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0c5      	beq.n	80040c6 <_vfiprintf_r+0x176>
 800413a:	9105      	str	r1, [sp, #20]
 800413c:	e7c3      	b.n	80040c6 <_vfiprintf_r+0x176>
 800413e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004142:	4604      	mov	r4, r0
 8004144:	2301      	movs	r3, #1
 8004146:	e7f0      	b.n	800412a <_vfiprintf_r+0x1da>
 8004148:	ab03      	add	r3, sp, #12
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	462a      	mov	r2, r5
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <_vfiprintf_r+0x258>)
 8004150:	a904      	add	r1, sp, #16
 8004152:	4630      	mov	r0, r6
 8004154:	f3af 8000 	nop.w
 8004158:	4607      	mov	r7, r0
 800415a:	1c78      	adds	r0, r7, #1
 800415c:	d1d6      	bne.n	800410c <_vfiprintf_r+0x1bc>
 800415e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004160:	07d9      	lsls	r1, r3, #31
 8004162:	d405      	bmi.n	8004170 <_vfiprintf_r+0x220>
 8004164:	89ab      	ldrh	r3, [r5, #12]
 8004166:	059a      	lsls	r2, r3, #22
 8004168:	d402      	bmi.n	8004170 <_vfiprintf_r+0x220>
 800416a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800416c:	f000 fc45 	bl	80049fa <__retarget_lock_release_recursive>
 8004170:	89ab      	ldrh	r3, [r5, #12]
 8004172:	065b      	lsls	r3, r3, #25
 8004174:	f53f af12 	bmi.w	8003f9c <_vfiprintf_r+0x4c>
 8004178:	9809      	ldr	r0, [sp, #36]	; 0x24
 800417a:	e711      	b.n	8003fa0 <_vfiprintf_r+0x50>
 800417c:	ab03      	add	r3, sp, #12
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	462a      	mov	r2, r5
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <_vfiprintf_r+0x258>)
 8004184:	a904      	add	r1, sp, #16
 8004186:	4630      	mov	r0, r6
 8004188:	f000 f880 	bl	800428c <_printf_i>
 800418c:	e7e4      	b.n	8004158 <_vfiprintf_r+0x208>
 800418e:	bf00      	nop
 8004190:	080050c0 	.word	0x080050c0
 8004194:	080050e0 	.word	0x080050e0
 8004198:	080050a0 	.word	0x080050a0
 800419c:	0800506d 	.word	0x0800506d
 80041a0:	08005077 	.word	0x08005077
 80041a4:	00000000 	.word	0x00000000
 80041a8:	08003f2b 	.word	0x08003f2b
 80041ac:	08005073 	.word	0x08005073

080041b0 <_printf_common>:
 80041b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041b4:	4616      	mov	r6, r2
 80041b6:	4699      	mov	r9, r3
 80041b8:	688a      	ldr	r2, [r1, #8]
 80041ba:	690b      	ldr	r3, [r1, #16]
 80041bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bfb8      	it	lt
 80041c4:	4613      	movlt	r3, r2
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80041cc:	4607      	mov	r7, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	b10a      	cbz	r2, 80041d6 <_printf_common+0x26>
 80041d2:	3301      	adds	r3, #1
 80041d4:	6033      	str	r3, [r6, #0]
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	0699      	lsls	r1, r3, #26
 80041da:	bf42      	ittt	mi
 80041dc:	6833      	ldrmi	r3, [r6, #0]
 80041de:	3302      	addmi	r3, #2
 80041e0:	6033      	strmi	r3, [r6, #0]
 80041e2:	6825      	ldr	r5, [r4, #0]
 80041e4:	f015 0506 	ands.w	r5, r5, #6
 80041e8:	d106      	bne.n	80041f8 <_printf_common+0x48>
 80041ea:	f104 0a19 	add.w	sl, r4, #25
 80041ee:	68e3      	ldr	r3, [r4, #12]
 80041f0:	6832      	ldr	r2, [r6, #0]
 80041f2:	1a9b      	subs	r3, r3, r2
 80041f4:	42ab      	cmp	r3, r5
 80041f6:	dc26      	bgt.n	8004246 <_printf_common+0x96>
 80041f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80041fc:	1e13      	subs	r3, r2, #0
 80041fe:	6822      	ldr	r2, [r4, #0]
 8004200:	bf18      	it	ne
 8004202:	2301      	movne	r3, #1
 8004204:	0692      	lsls	r2, r2, #26
 8004206:	d42b      	bmi.n	8004260 <_printf_common+0xb0>
 8004208:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800420c:	4649      	mov	r1, r9
 800420e:	4638      	mov	r0, r7
 8004210:	47c0      	blx	r8
 8004212:	3001      	adds	r0, #1
 8004214:	d01e      	beq.n	8004254 <_printf_common+0xa4>
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	68e5      	ldr	r5, [r4, #12]
 800421a:	6832      	ldr	r2, [r6, #0]
 800421c:	f003 0306 	and.w	r3, r3, #6
 8004220:	2b04      	cmp	r3, #4
 8004222:	bf08      	it	eq
 8004224:	1aad      	subeq	r5, r5, r2
 8004226:	68a3      	ldr	r3, [r4, #8]
 8004228:	6922      	ldr	r2, [r4, #16]
 800422a:	bf0c      	ite	eq
 800422c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004230:	2500      	movne	r5, #0
 8004232:	4293      	cmp	r3, r2
 8004234:	bfc4      	itt	gt
 8004236:	1a9b      	subgt	r3, r3, r2
 8004238:	18ed      	addgt	r5, r5, r3
 800423a:	2600      	movs	r6, #0
 800423c:	341a      	adds	r4, #26
 800423e:	42b5      	cmp	r5, r6
 8004240:	d11a      	bne.n	8004278 <_printf_common+0xc8>
 8004242:	2000      	movs	r0, #0
 8004244:	e008      	b.n	8004258 <_printf_common+0xa8>
 8004246:	2301      	movs	r3, #1
 8004248:	4652      	mov	r2, sl
 800424a:	4649      	mov	r1, r9
 800424c:	4638      	mov	r0, r7
 800424e:	47c0      	blx	r8
 8004250:	3001      	adds	r0, #1
 8004252:	d103      	bne.n	800425c <_printf_common+0xac>
 8004254:	f04f 30ff 	mov.w	r0, #4294967295
 8004258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800425c:	3501      	adds	r5, #1
 800425e:	e7c6      	b.n	80041ee <_printf_common+0x3e>
 8004260:	18e1      	adds	r1, r4, r3
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	2030      	movs	r0, #48	; 0x30
 8004266:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800426a:	4422      	add	r2, r4
 800426c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004270:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004274:	3302      	adds	r3, #2
 8004276:	e7c7      	b.n	8004208 <_printf_common+0x58>
 8004278:	2301      	movs	r3, #1
 800427a:	4622      	mov	r2, r4
 800427c:	4649      	mov	r1, r9
 800427e:	4638      	mov	r0, r7
 8004280:	47c0      	blx	r8
 8004282:	3001      	adds	r0, #1
 8004284:	d0e6      	beq.n	8004254 <_printf_common+0xa4>
 8004286:	3601      	adds	r6, #1
 8004288:	e7d9      	b.n	800423e <_printf_common+0x8e>
	...

0800428c <_printf_i>:
 800428c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004290:	460c      	mov	r4, r1
 8004292:	4691      	mov	r9, r2
 8004294:	7e27      	ldrb	r7, [r4, #24]
 8004296:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004298:	2f78      	cmp	r7, #120	; 0x78
 800429a:	4680      	mov	r8, r0
 800429c:	469a      	mov	sl, r3
 800429e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042a2:	d807      	bhi.n	80042b4 <_printf_i+0x28>
 80042a4:	2f62      	cmp	r7, #98	; 0x62
 80042a6:	d80a      	bhi.n	80042be <_printf_i+0x32>
 80042a8:	2f00      	cmp	r7, #0
 80042aa:	f000 80d8 	beq.w	800445e <_printf_i+0x1d2>
 80042ae:	2f58      	cmp	r7, #88	; 0x58
 80042b0:	f000 80a3 	beq.w	80043fa <_printf_i+0x16e>
 80042b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80042b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80042bc:	e03a      	b.n	8004334 <_printf_i+0xa8>
 80042be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80042c2:	2b15      	cmp	r3, #21
 80042c4:	d8f6      	bhi.n	80042b4 <_printf_i+0x28>
 80042c6:	a001      	add	r0, pc, #4	; (adr r0, 80042cc <_printf_i+0x40>)
 80042c8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80042cc:	08004325 	.word	0x08004325
 80042d0:	08004339 	.word	0x08004339
 80042d4:	080042b5 	.word	0x080042b5
 80042d8:	080042b5 	.word	0x080042b5
 80042dc:	080042b5 	.word	0x080042b5
 80042e0:	080042b5 	.word	0x080042b5
 80042e4:	08004339 	.word	0x08004339
 80042e8:	080042b5 	.word	0x080042b5
 80042ec:	080042b5 	.word	0x080042b5
 80042f0:	080042b5 	.word	0x080042b5
 80042f4:	080042b5 	.word	0x080042b5
 80042f8:	08004445 	.word	0x08004445
 80042fc:	08004369 	.word	0x08004369
 8004300:	08004427 	.word	0x08004427
 8004304:	080042b5 	.word	0x080042b5
 8004308:	080042b5 	.word	0x080042b5
 800430c:	08004467 	.word	0x08004467
 8004310:	080042b5 	.word	0x080042b5
 8004314:	08004369 	.word	0x08004369
 8004318:	080042b5 	.word	0x080042b5
 800431c:	080042b5 	.word	0x080042b5
 8004320:	0800442f 	.word	0x0800442f
 8004324:	680b      	ldr	r3, [r1, #0]
 8004326:	1d1a      	adds	r2, r3, #4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	600a      	str	r2, [r1, #0]
 800432c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004330:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004334:	2301      	movs	r3, #1
 8004336:	e0a3      	b.n	8004480 <_printf_i+0x1f4>
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	6808      	ldr	r0, [r1, #0]
 800433c:	062e      	lsls	r6, r5, #24
 800433e:	f100 0304 	add.w	r3, r0, #4
 8004342:	d50a      	bpl.n	800435a <_printf_i+0xce>
 8004344:	6805      	ldr	r5, [r0, #0]
 8004346:	600b      	str	r3, [r1, #0]
 8004348:	2d00      	cmp	r5, #0
 800434a:	da03      	bge.n	8004354 <_printf_i+0xc8>
 800434c:	232d      	movs	r3, #45	; 0x2d
 800434e:	426d      	negs	r5, r5
 8004350:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004354:	485e      	ldr	r0, [pc, #376]	; (80044d0 <_printf_i+0x244>)
 8004356:	230a      	movs	r3, #10
 8004358:	e019      	b.n	800438e <_printf_i+0x102>
 800435a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800435e:	6805      	ldr	r5, [r0, #0]
 8004360:	600b      	str	r3, [r1, #0]
 8004362:	bf18      	it	ne
 8004364:	b22d      	sxthne	r5, r5
 8004366:	e7ef      	b.n	8004348 <_printf_i+0xbc>
 8004368:	680b      	ldr	r3, [r1, #0]
 800436a:	6825      	ldr	r5, [r4, #0]
 800436c:	1d18      	adds	r0, r3, #4
 800436e:	6008      	str	r0, [r1, #0]
 8004370:	0628      	lsls	r0, r5, #24
 8004372:	d501      	bpl.n	8004378 <_printf_i+0xec>
 8004374:	681d      	ldr	r5, [r3, #0]
 8004376:	e002      	b.n	800437e <_printf_i+0xf2>
 8004378:	0669      	lsls	r1, r5, #25
 800437a:	d5fb      	bpl.n	8004374 <_printf_i+0xe8>
 800437c:	881d      	ldrh	r5, [r3, #0]
 800437e:	4854      	ldr	r0, [pc, #336]	; (80044d0 <_printf_i+0x244>)
 8004380:	2f6f      	cmp	r7, #111	; 0x6f
 8004382:	bf0c      	ite	eq
 8004384:	2308      	moveq	r3, #8
 8004386:	230a      	movne	r3, #10
 8004388:	2100      	movs	r1, #0
 800438a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800438e:	6866      	ldr	r6, [r4, #4]
 8004390:	60a6      	str	r6, [r4, #8]
 8004392:	2e00      	cmp	r6, #0
 8004394:	bfa2      	ittt	ge
 8004396:	6821      	ldrge	r1, [r4, #0]
 8004398:	f021 0104 	bicge.w	r1, r1, #4
 800439c:	6021      	strge	r1, [r4, #0]
 800439e:	b90d      	cbnz	r5, 80043a4 <_printf_i+0x118>
 80043a0:	2e00      	cmp	r6, #0
 80043a2:	d04d      	beq.n	8004440 <_printf_i+0x1b4>
 80043a4:	4616      	mov	r6, r2
 80043a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80043aa:	fb03 5711 	mls	r7, r3, r1, r5
 80043ae:	5dc7      	ldrb	r7, [r0, r7]
 80043b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043b4:	462f      	mov	r7, r5
 80043b6:	42bb      	cmp	r3, r7
 80043b8:	460d      	mov	r5, r1
 80043ba:	d9f4      	bls.n	80043a6 <_printf_i+0x11a>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d10b      	bne.n	80043d8 <_printf_i+0x14c>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	07df      	lsls	r7, r3, #31
 80043c4:	d508      	bpl.n	80043d8 <_printf_i+0x14c>
 80043c6:	6923      	ldr	r3, [r4, #16]
 80043c8:	6861      	ldr	r1, [r4, #4]
 80043ca:	4299      	cmp	r1, r3
 80043cc:	bfde      	ittt	le
 80043ce:	2330      	movle	r3, #48	; 0x30
 80043d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80043d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80043d8:	1b92      	subs	r2, r2, r6
 80043da:	6122      	str	r2, [r4, #16]
 80043dc:	f8cd a000 	str.w	sl, [sp]
 80043e0:	464b      	mov	r3, r9
 80043e2:	aa03      	add	r2, sp, #12
 80043e4:	4621      	mov	r1, r4
 80043e6:	4640      	mov	r0, r8
 80043e8:	f7ff fee2 	bl	80041b0 <_printf_common>
 80043ec:	3001      	adds	r0, #1
 80043ee:	d14c      	bne.n	800448a <_printf_i+0x1fe>
 80043f0:	f04f 30ff 	mov.w	r0, #4294967295
 80043f4:	b004      	add	sp, #16
 80043f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043fa:	4835      	ldr	r0, [pc, #212]	; (80044d0 <_printf_i+0x244>)
 80043fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	680e      	ldr	r6, [r1, #0]
 8004404:	061f      	lsls	r7, r3, #24
 8004406:	f856 5b04 	ldr.w	r5, [r6], #4
 800440a:	600e      	str	r6, [r1, #0]
 800440c:	d514      	bpl.n	8004438 <_printf_i+0x1ac>
 800440e:	07d9      	lsls	r1, r3, #31
 8004410:	bf44      	itt	mi
 8004412:	f043 0320 	orrmi.w	r3, r3, #32
 8004416:	6023      	strmi	r3, [r4, #0]
 8004418:	b91d      	cbnz	r5, 8004422 <_printf_i+0x196>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	f023 0320 	bic.w	r3, r3, #32
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	2310      	movs	r3, #16
 8004424:	e7b0      	b.n	8004388 <_printf_i+0xfc>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	6023      	str	r3, [r4, #0]
 800442e:	2378      	movs	r3, #120	; 0x78
 8004430:	4828      	ldr	r0, [pc, #160]	; (80044d4 <_printf_i+0x248>)
 8004432:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004436:	e7e3      	b.n	8004400 <_printf_i+0x174>
 8004438:	065e      	lsls	r6, r3, #25
 800443a:	bf48      	it	mi
 800443c:	b2ad      	uxthmi	r5, r5
 800443e:	e7e6      	b.n	800440e <_printf_i+0x182>
 8004440:	4616      	mov	r6, r2
 8004442:	e7bb      	b.n	80043bc <_printf_i+0x130>
 8004444:	680b      	ldr	r3, [r1, #0]
 8004446:	6826      	ldr	r6, [r4, #0]
 8004448:	6960      	ldr	r0, [r4, #20]
 800444a:	1d1d      	adds	r5, r3, #4
 800444c:	600d      	str	r5, [r1, #0]
 800444e:	0635      	lsls	r5, r6, #24
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	d501      	bpl.n	8004458 <_printf_i+0x1cc>
 8004454:	6018      	str	r0, [r3, #0]
 8004456:	e002      	b.n	800445e <_printf_i+0x1d2>
 8004458:	0671      	lsls	r1, r6, #25
 800445a:	d5fb      	bpl.n	8004454 <_printf_i+0x1c8>
 800445c:	8018      	strh	r0, [r3, #0]
 800445e:	2300      	movs	r3, #0
 8004460:	6123      	str	r3, [r4, #16]
 8004462:	4616      	mov	r6, r2
 8004464:	e7ba      	b.n	80043dc <_printf_i+0x150>
 8004466:	680b      	ldr	r3, [r1, #0]
 8004468:	1d1a      	adds	r2, r3, #4
 800446a:	600a      	str	r2, [r1, #0]
 800446c:	681e      	ldr	r6, [r3, #0]
 800446e:	6862      	ldr	r2, [r4, #4]
 8004470:	2100      	movs	r1, #0
 8004472:	4630      	mov	r0, r6
 8004474:	f7fb feb4 	bl	80001e0 <memchr>
 8004478:	b108      	cbz	r0, 800447e <_printf_i+0x1f2>
 800447a:	1b80      	subs	r0, r0, r6
 800447c:	6060      	str	r0, [r4, #4]
 800447e:	6863      	ldr	r3, [r4, #4]
 8004480:	6123      	str	r3, [r4, #16]
 8004482:	2300      	movs	r3, #0
 8004484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004488:	e7a8      	b.n	80043dc <_printf_i+0x150>
 800448a:	6923      	ldr	r3, [r4, #16]
 800448c:	4632      	mov	r2, r6
 800448e:	4649      	mov	r1, r9
 8004490:	4640      	mov	r0, r8
 8004492:	47d0      	blx	sl
 8004494:	3001      	adds	r0, #1
 8004496:	d0ab      	beq.n	80043f0 <_printf_i+0x164>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	079b      	lsls	r3, r3, #30
 800449c:	d413      	bmi.n	80044c6 <_printf_i+0x23a>
 800449e:	68e0      	ldr	r0, [r4, #12]
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	4298      	cmp	r0, r3
 80044a4:	bfb8      	it	lt
 80044a6:	4618      	movlt	r0, r3
 80044a8:	e7a4      	b.n	80043f4 <_printf_i+0x168>
 80044aa:	2301      	movs	r3, #1
 80044ac:	4632      	mov	r2, r6
 80044ae:	4649      	mov	r1, r9
 80044b0:	4640      	mov	r0, r8
 80044b2:	47d0      	blx	sl
 80044b4:	3001      	adds	r0, #1
 80044b6:	d09b      	beq.n	80043f0 <_printf_i+0x164>
 80044b8:	3501      	adds	r5, #1
 80044ba:	68e3      	ldr	r3, [r4, #12]
 80044bc:	9903      	ldr	r1, [sp, #12]
 80044be:	1a5b      	subs	r3, r3, r1
 80044c0:	42ab      	cmp	r3, r5
 80044c2:	dcf2      	bgt.n	80044aa <_printf_i+0x21e>
 80044c4:	e7eb      	b.n	800449e <_printf_i+0x212>
 80044c6:	2500      	movs	r5, #0
 80044c8:	f104 0619 	add.w	r6, r4, #25
 80044cc:	e7f5      	b.n	80044ba <_printf_i+0x22e>
 80044ce:	bf00      	nop
 80044d0:	0800507e 	.word	0x0800507e
 80044d4:	0800508f 	.word	0x0800508f

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4d06      	ldr	r5, [pc, #24]	; (80044f4 <_sbrk_r+0x1c>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4604      	mov	r4, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	602b      	str	r3, [r5, #0]
 80044e4:	f7fc ff9e 	bl	8001424 <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	20002814 	.word	0x20002814

080044f8 <__swbuf_r>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	460e      	mov	r6, r1
 80044fc:	4614      	mov	r4, r2
 80044fe:	4605      	mov	r5, r0
 8004500:	b118      	cbz	r0, 800450a <__swbuf_r+0x12>
 8004502:	6983      	ldr	r3, [r0, #24]
 8004504:	b90b      	cbnz	r3, 800450a <__swbuf_r+0x12>
 8004506:	f000 f9d9 	bl	80048bc <__sinit>
 800450a:	4b21      	ldr	r3, [pc, #132]	; (8004590 <__swbuf_r+0x98>)
 800450c:	429c      	cmp	r4, r3
 800450e:	d12b      	bne.n	8004568 <__swbuf_r+0x70>
 8004510:	686c      	ldr	r4, [r5, #4]
 8004512:	69a3      	ldr	r3, [r4, #24]
 8004514:	60a3      	str	r3, [r4, #8]
 8004516:	89a3      	ldrh	r3, [r4, #12]
 8004518:	071a      	lsls	r2, r3, #28
 800451a:	d52f      	bpl.n	800457c <__swbuf_r+0x84>
 800451c:	6923      	ldr	r3, [r4, #16]
 800451e:	b36b      	cbz	r3, 800457c <__swbuf_r+0x84>
 8004520:	6923      	ldr	r3, [r4, #16]
 8004522:	6820      	ldr	r0, [r4, #0]
 8004524:	1ac0      	subs	r0, r0, r3
 8004526:	6963      	ldr	r3, [r4, #20]
 8004528:	b2f6      	uxtb	r6, r6
 800452a:	4283      	cmp	r3, r0
 800452c:	4637      	mov	r7, r6
 800452e:	dc04      	bgt.n	800453a <__swbuf_r+0x42>
 8004530:	4621      	mov	r1, r4
 8004532:	4628      	mov	r0, r5
 8004534:	f000 f92e 	bl	8004794 <_fflush_r>
 8004538:	bb30      	cbnz	r0, 8004588 <__swbuf_r+0x90>
 800453a:	68a3      	ldr	r3, [r4, #8]
 800453c:	3b01      	subs	r3, #1
 800453e:	60a3      	str	r3, [r4, #8]
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	701e      	strb	r6, [r3, #0]
 8004548:	6963      	ldr	r3, [r4, #20]
 800454a:	3001      	adds	r0, #1
 800454c:	4283      	cmp	r3, r0
 800454e:	d004      	beq.n	800455a <__swbuf_r+0x62>
 8004550:	89a3      	ldrh	r3, [r4, #12]
 8004552:	07db      	lsls	r3, r3, #31
 8004554:	d506      	bpl.n	8004564 <__swbuf_r+0x6c>
 8004556:	2e0a      	cmp	r6, #10
 8004558:	d104      	bne.n	8004564 <__swbuf_r+0x6c>
 800455a:	4621      	mov	r1, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f919 	bl	8004794 <_fflush_r>
 8004562:	b988      	cbnz	r0, 8004588 <__swbuf_r+0x90>
 8004564:	4638      	mov	r0, r7
 8004566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004568:	4b0a      	ldr	r3, [pc, #40]	; (8004594 <__swbuf_r+0x9c>)
 800456a:	429c      	cmp	r4, r3
 800456c:	d101      	bne.n	8004572 <__swbuf_r+0x7a>
 800456e:	68ac      	ldr	r4, [r5, #8]
 8004570:	e7cf      	b.n	8004512 <__swbuf_r+0x1a>
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <__swbuf_r+0xa0>)
 8004574:	429c      	cmp	r4, r3
 8004576:	bf08      	it	eq
 8004578:	68ec      	ldreq	r4, [r5, #12]
 800457a:	e7ca      	b.n	8004512 <__swbuf_r+0x1a>
 800457c:	4621      	mov	r1, r4
 800457e:	4628      	mov	r0, r5
 8004580:	f000 f80c 	bl	800459c <__swsetup_r>
 8004584:	2800      	cmp	r0, #0
 8004586:	d0cb      	beq.n	8004520 <__swbuf_r+0x28>
 8004588:	f04f 37ff 	mov.w	r7, #4294967295
 800458c:	e7ea      	b.n	8004564 <__swbuf_r+0x6c>
 800458e:	bf00      	nop
 8004590:	080050c0 	.word	0x080050c0
 8004594:	080050e0 	.word	0x080050e0
 8004598:	080050a0 	.word	0x080050a0

0800459c <__swsetup_r>:
 800459c:	4b32      	ldr	r3, [pc, #200]	; (8004668 <__swsetup_r+0xcc>)
 800459e:	b570      	push	{r4, r5, r6, lr}
 80045a0:	681d      	ldr	r5, [r3, #0]
 80045a2:	4606      	mov	r6, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	b125      	cbz	r5, 80045b2 <__swsetup_r+0x16>
 80045a8:	69ab      	ldr	r3, [r5, #24]
 80045aa:	b913      	cbnz	r3, 80045b2 <__swsetup_r+0x16>
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 f985 	bl	80048bc <__sinit>
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <__swsetup_r+0xd0>)
 80045b4:	429c      	cmp	r4, r3
 80045b6:	d10f      	bne.n	80045d8 <__swsetup_r+0x3c>
 80045b8:	686c      	ldr	r4, [r5, #4]
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80045c0:	0719      	lsls	r1, r3, #28
 80045c2:	d42c      	bmi.n	800461e <__swsetup_r+0x82>
 80045c4:	06dd      	lsls	r5, r3, #27
 80045c6:	d411      	bmi.n	80045ec <__swsetup_r+0x50>
 80045c8:	2309      	movs	r3, #9
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80045d0:	81a3      	strh	r3, [r4, #12]
 80045d2:	f04f 30ff 	mov.w	r0, #4294967295
 80045d6:	e03e      	b.n	8004656 <__swsetup_r+0xba>
 80045d8:	4b25      	ldr	r3, [pc, #148]	; (8004670 <__swsetup_r+0xd4>)
 80045da:	429c      	cmp	r4, r3
 80045dc:	d101      	bne.n	80045e2 <__swsetup_r+0x46>
 80045de:	68ac      	ldr	r4, [r5, #8]
 80045e0:	e7eb      	b.n	80045ba <__swsetup_r+0x1e>
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <__swsetup_r+0xd8>)
 80045e4:	429c      	cmp	r4, r3
 80045e6:	bf08      	it	eq
 80045e8:	68ec      	ldreq	r4, [r5, #12]
 80045ea:	e7e6      	b.n	80045ba <__swsetup_r+0x1e>
 80045ec:	0758      	lsls	r0, r3, #29
 80045ee:	d512      	bpl.n	8004616 <__swsetup_r+0x7a>
 80045f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f2:	b141      	cbz	r1, 8004606 <__swsetup_r+0x6a>
 80045f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80045f8:	4299      	cmp	r1, r3
 80045fa:	d002      	beq.n	8004602 <__swsetup_r+0x66>
 80045fc:	4630      	mov	r0, r6
 80045fe:	f7ff fbd3 	bl	8003da8 <_free_r>
 8004602:	2300      	movs	r3, #0
 8004604:	6363      	str	r3, [r4, #52]	; 0x34
 8004606:	89a3      	ldrh	r3, [r4, #12]
 8004608:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	2300      	movs	r3, #0
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	6923      	ldr	r3, [r4, #16]
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	f043 0308 	orr.w	r3, r3, #8
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	6923      	ldr	r3, [r4, #16]
 8004620:	b94b      	cbnz	r3, 8004636 <__swsetup_r+0x9a>
 8004622:	89a3      	ldrh	r3, [r4, #12]
 8004624:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800462c:	d003      	beq.n	8004636 <__swsetup_r+0x9a>
 800462e:	4621      	mov	r1, r4
 8004630:	4630      	mov	r0, r6
 8004632:	f000 fa07 	bl	8004a44 <__smakebuf_r>
 8004636:	89a0      	ldrh	r0, [r4, #12]
 8004638:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800463c:	f010 0301 	ands.w	r3, r0, #1
 8004640:	d00a      	beq.n	8004658 <__swsetup_r+0xbc>
 8004642:	2300      	movs	r3, #0
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	6963      	ldr	r3, [r4, #20]
 8004648:	425b      	negs	r3, r3
 800464a:	61a3      	str	r3, [r4, #24]
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	b943      	cbnz	r3, 8004662 <__swsetup_r+0xc6>
 8004650:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004654:	d1ba      	bne.n	80045cc <__swsetup_r+0x30>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	0781      	lsls	r1, r0, #30
 800465a:	bf58      	it	pl
 800465c:	6963      	ldrpl	r3, [r4, #20]
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	e7f4      	b.n	800464c <__swsetup_r+0xb0>
 8004662:	2000      	movs	r0, #0
 8004664:	e7f7      	b.n	8004656 <__swsetup_r+0xba>
 8004666:	bf00      	nop
 8004668:	20000158 	.word	0x20000158
 800466c:	080050c0 	.word	0x080050c0
 8004670:	080050e0 	.word	0x080050e0
 8004674:	080050a0 	.word	0x080050a0

08004678 <abort>:
 8004678:	b508      	push	{r3, lr}
 800467a:	2006      	movs	r0, #6
 800467c:	f000 fa56 	bl	8004b2c <raise>
 8004680:	2001      	movs	r0, #1
 8004682:	f7fc fe57 	bl	8001334 <_exit>
	...

08004688 <__sflush_r>:
 8004688:	898a      	ldrh	r2, [r1, #12]
 800468a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468e:	4605      	mov	r5, r0
 8004690:	0710      	lsls	r0, r2, #28
 8004692:	460c      	mov	r4, r1
 8004694:	d458      	bmi.n	8004748 <__sflush_r+0xc0>
 8004696:	684b      	ldr	r3, [r1, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	dc05      	bgt.n	80046a8 <__sflush_r+0x20>
 800469c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dc02      	bgt.n	80046a8 <__sflush_r+0x20>
 80046a2:	2000      	movs	r0, #0
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	d0f9      	beq.n	80046a2 <__sflush_r+0x1a>
 80046ae:	2300      	movs	r3, #0
 80046b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80046b4:	682f      	ldr	r7, [r5, #0]
 80046b6:	602b      	str	r3, [r5, #0]
 80046b8:	d032      	beq.n	8004720 <__sflush_r+0x98>
 80046ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80046bc:	89a3      	ldrh	r3, [r4, #12]
 80046be:	075a      	lsls	r2, r3, #29
 80046c0:	d505      	bpl.n	80046ce <__sflush_r+0x46>
 80046c2:	6863      	ldr	r3, [r4, #4]
 80046c4:	1ac0      	subs	r0, r0, r3
 80046c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046c8:	b10b      	cbz	r3, 80046ce <__sflush_r+0x46>
 80046ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80046cc:	1ac0      	subs	r0, r0, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	4602      	mov	r2, r0
 80046d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80046d4:	6a21      	ldr	r1, [r4, #32]
 80046d6:	4628      	mov	r0, r5
 80046d8:	47b0      	blx	r6
 80046da:	1c43      	adds	r3, r0, #1
 80046dc:	89a3      	ldrh	r3, [r4, #12]
 80046de:	d106      	bne.n	80046ee <__sflush_r+0x66>
 80046e0:	6829      	ldr	r1, [r5, #0]
 80046e2:	291d      	cmp	r1, #29
 80046e4:	d82c      	bhi.n	8004740 <__sflush_r+0xb8>
 80046e6:	4a2a      	ldr	r2, [pc, #168]	; (8004790 <__sflush_r+0x108>)
 80046e8:	40ca      	lsrs	r2, r1
 80046ea:	07d6      	lsls	r6, r2, #31
 80046ec:	d528      	bpl.n	8004740 <__sflush_r+0xb8>
 80046ee:	2200      	movs	r2, #0
 80046f0:	6062      	str	r2, [r4, #4]
 80046f2:	04d9      	lsls	r1, r3, #19
 80046f4:	6922      	ldr	r2, [r4, #16]
 80046f6:	6022      	str	r2, [r4, #0]
 80046f8:	d504      	bpl.n	8004704 <__sflush_r+0x7c>
 80046fa:	1c42      	adds	r2, r0, #1
 80046fc:	d101      	bne.n	8004702 <__sflush_r+0x7a>
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	b903      	cbnz	r3, 8004704 <__sflush_r+0x7c>
 8004702:	6560      	str	r0, [r4, #84]	; 0x54
 8004704:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004706:	602f      	str	r7, [r5, #0]
 8004708:	2900      	cmp	r1, #0
 800470a:	d0ca      	beq.n	80046a2 <__sflush_r+0x1a>
 800470c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004710:	4299      	cmp	r1, r3
 8004712:	d002      	beq.n	800471a <__sflush_r+0x92>
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff fb47 	bl	8003da8 <_free_r>
 800471a:	2000      	movs	r0, #0
 800471c:	6360      	str	r0, [r4, #52]	; 0x34
 800471e:	e7c1      	b.n	80046a4 <__sflush_r+0x1c>
 8004720:	6a21      	ldr	r1, [r4, #32]
 8004722:	2301      	movs	r3, #1
 8004724:	4628      	mov	r0, r5
 8004726:	47b0      	blx	r6
 8004728:	1c41      	adds	r1, r0, #1
 800472a:	d1c7      	bne.n	80046bc <__sflush_r+0x34>
 800472c:	682b      	ldr	r3, [r5, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0c4      	beq.n	80046bc <__sflush_r+0x34>
 8004732:	2b1d      	cmp	r3, #29
 8004734:	d001      	beq.n	800473a <__sflush_r+0xb2>
 8004736:	2b16      	cmp	r3, #22
 8004738:	d101      	bne.n	800473e <__sflush_r+0xb6>
 800473a:	602f      	str	r7, [r5, #0]
 800473c:	e7b1      	b.n	80046a2 <__sflush_r+0x1a>
 800473e:	89a3      	ldrh	r3, [r4, #12]
 8004740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004744:	81a3      	strh	r3, [r4, #12]
 8004746:	e7ad      	b.n	80046a4 <__sflush_r+0x1c>
 8004748:	690f      	ldr	r7, [r1, #16]
 800474a:	2f00      	cmp	r7, #0
 800474c:	d0a9      	beq.n	80046a2 <__sflush_r+0x1a>
 800474e:	0793      	lsls	r3, r2, #30
 8004750:	680e      	ldr	r6, [r1, #0]
 8004752:	bf08      	it	eq
 8004754:	694b      	ldreq	r3, [r1, #20]
 8004756:	600f      	str	r7, [r1, #0]
 8004758:	bf18      	it	ne
 800475a:	2300      	movne	r3, #0
 800475c:	eba6 0807 	sub.w	r8, r6, r7
 8004760:	608b      	str	r3, [r1, #8]
 8004762:	f1b8 0f00 	cmp.w	r8, #0
 8004766:	dd9c      	ble.n	80046a2 <__sflush_r+0x1a>
 8004768:	6a21      	ldr	r1, [r4, #32]
 800476a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800476c:	4643      	mov	r3, r8
 800476e:	463a      	mov	r2, r7
 8004770:	4628      	mov	r0, r5
 8004772:	47b0      	blx	r6
 8004774:	2800      	cmp	r0, #0
 8004776:	dc06      	bgt.n	8004786 <__sflush_r+0xfe>
 8004778:	89a3      	ldrh	r3, [r4, #12]
 800477a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800477e:	81a3      	strh	r3, [r4, #12]
 8004780:	f04f 30ff 	mov.w	r0, #4294967295
 8004784:	e78e      	b.n	80046a4 <__sflush_r+0x1c>
 8004786:	4407      	add	r7, r0
 8004788:	eba8 0800 	sub.w	r8, r8, r0
 800478c:	e7e9      	b.n	8004762 <__sflush_r+0xda>
 800478e:	bf00      	nop
 8004790:	20400001 	.word	0x20400001

08004794 <_fflush_r>:
 8004794:	b538      	push	{r3, r4, r5, lr}
 8004796:	690b      	ldr	r3, [r1, #16]
 8004798:	4605      	mov	r5, r0
 800479a:	460c      	mov	r4, r1
 800479c:	b913      	cbnz	r3, 80047a4 <_fflush_r+0x10>
 800479e:	2500      	movs	r5, #0
 80047a0:	4628      	mov	r0, r5
 80047a2:	bd38      	pop	{r3, r4, r5, pc}
 80047a4:	b118      	cbz	r0, 80047ae <_fflush_r+0x1a>
 80047a6:	6983      	ldr	r3, [r0, #24]
 80047a8:	b90b      	cbnz	r3, 80047ae <_fflush_r+0x1a>
 80047aa:	f000 f887 	bl	80048bc <__sinit>
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <_fflush_r+0x6c>)
 80047b0:	429c      	cmp	r4, r3
 80047b2:	d11b      	bne.n	80047ec <_fflush_r+0x58>
 80047b4:	686c      	ldr	r4, [r5, #4]
 80047b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0ef      	beq.n	800479e <_fflush_r+0xa>
 80047be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80047c0:	07d0      	lsls	r0, r2, #31
 80047c2:	d404      	bmi.n	80047ce <_fflush_r+0x3a>
 80047c4:	0599      	lsls	r1, r3, #22
 80047c6:	d402      	bmi.n	80047ce <_fflush_r+0x3a>
 80047c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047ca:	f000 f915 	bl	80049f8 <__retarget_lock_acquire_recursive>
 80047ce:	4628      	mov	r0, r5
 80047d0:	4621      	mov	r1, r4
 80047d2:	f7ff ff59 	bl	8004688 <__sflush_r>
 80047d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80047d8:	07da      	lsls	r2, r3, #31
 80047da:	4605      	mov	r5, r0
 80047dc:	d4e0      	bmi.n	80047a0 <_fflush_r+0xc>
 80047de:	89a3      	ldrh	r3, [r4, #12]
 80047e0:	059b      	lsls	r3, r3, #22
 80047e2:	d4dd      	bmi.n	80047a0 <_fflush_r+0xc>
 80047e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80047e6:	f000 f908 	bl	80049fa <__retarget_lock_release_recursive>
 80047ea:	e7d9      	b.n	80047a0 <_fflush_r+0xc>
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_fflush_r+0x70>)
 80047ee:	429c      	cmp	r4, r3
 80047f0:	d101      	bne.n	80047f6 <_fflush_r+0x62>
 80047f2:	68ac      	ldr	r4, [r5, #8]
 80047f4:	e7df      	b.n	80047b6 <_fflush_r+0x22>
 80047f6:	4b04      	ldr	r3, [pc, #16]	; (8004808 <_fflush_r+0x74>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	bf08      	it	eq
 80047fc:	68ec      	ldreq	r4, [r5, #12]
 80047fe:	e7da      	b.n	80047b6 <_fflush_r+0x22>
 8004800:	080050c0 	.word	0x080050c0
 8004804:	080050e0 	.word	0x080050e0
 8004808:	080050a0 	.word	0x080050a0

0800480c <std>:
 800480c:	2300      	movs	r3, #0
 800480e:	b510      	push	{r4, lr}
 8004810:	4604      	mov	r4, r0
 8004812:	e9c0 3300 	strd	r3, r3, [r0]
 8004816:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800481a:	6083      	str	r3, [r0, #8]
 800481c:	8181      	strh	r1, [r0, #12]
 800481e:	6643      	str	r3, [r0, #100]	; 0x64
 8004820:	81c2      	strh	r2, [r0, #14]
 8004822:	6183      	str	r3, [r0, #24]
 8004824:	4619      	mov	r1, r3
 8004826:	2208      	movs	r2, #8
 8004828:	305c      	adds	r0, #92	; 0x5c
 800482a:	f7ff f97b 	bl	8003b24 <memset>
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <std+0x38>)
 8004830:	6263      	str	r3, [r4, #36]	; 0x24
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <std+0x3c>)
 8004834:	62a3      	str	r3, [r4, #40]	; 0x28
 8004836:	4b05      	ldr	r3, [pc, #20]	; (800484c <std+0x40>)
 8004838:	62e3      	str	r3, [r4, #44]	; 0x2c
 800483a:	4b05      	ldr	r3, [pc, #20]	; (8004850 <std+0x44>)
 800483c:	6224      	str	r4, [r4, #32]
 800483e:	6323      	str	r3, [r4, #48]	; 0x30
 8004840:	bd10      	pop	{r4, pc}
 8004842:	bf00      	nop
 8004844:	08004b65 	.word	0x08004b65
 8004848:	08004b87 	.word	0x08004b87
 800484c:	08004bbf 	.word	0x08004bbf
 8004850:	08004be3 	.word	0x08004be3

08004854 <_cleanup_r>:
 8004854:	4901      	ldr	r1, [pc, #4]	; (800485c <_cleanup_r+0x8>)
 8004856:	f000 b8af 	b.w	80049b8 <_fwalk_reent>
 800485a:	bf00      	nop
 800485c:	08004795 	.word	0x08004795

08004860 <__sfmoreglue>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	1e4a      	subs	r2, r1, #1
 8004864:	2568      	movs	r5, #104	; 0x68
 8004866:	4355      	muls	r5, r2
 8004868:	460e      	mov	r6, r1
 800486a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800486e:	f7ff faeb 	bl	8003e48 <_malloc_r>
 8004872:	4604      	mov	r4, r0
 8004874:	b140      	cbz	r0, 8004888 <__sfmoreglue+0x28>
 8004876:	2100      	movs	r1, #0
 8004878:	e9c0 1600 	strd	r1, r6, [r0]
 800487c:	300c      	adds	r0, #12
 800487e:	60a0      	str	r0, [r4, #8]
 8004880:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004884:	f7ff f94e 	bl	8003b24 <memset>
 8004888:	4620      	mov	r0, r4
 800488a:	bd70      	pop	{r4, r5, r6, pc}

0800488c <__sfp_lock_acquire>:
 800488c:	4801      	ldr	r0, [pc, #4]	; (8004894 <__sfp_lock_acquire+0x8>)
 800488e:	f000 b8b3 	b.w	80049f8 <__retarget_lock_acquire_recursive>
 8004892:	bf00      	nop
 8004894:	20002810 	.word	0x20002810

08004898 <__sfp_lock_release>:
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <__sfp_lock_release+0x8>)
 800489a:	f000 b8ae 	b.w	80049fa <__retarget_lock_release_recursive>
 800489e:	bf00      	nop
 80048a0:	20002810 	.word	0x20002810

080048a4 <__sinit_lock_acquire>:
 80048a4:	4801      	ldr	r0, [pc, #4]	; (80048ac <__sinit_lock_acquire+0x8>)
 80048a6:	f000 b8a7 	b.w	80049f8 <__retarget_lock_acquire_recursive>
 80048aa:	bf00      	nop
 80048ac:	2000280b 	.word	0x2000280b

080048b0 <__sinit_lock_release>:
 80048b0:	4801      	ldr	r0, [pc, #4]	; (80048b8 <__sinit_lock_release+0x8>)
 80048b2:	f000 b8a2 	b.w	80049fa <__retarget_lock_release_recursive>
 80048b6:	bf00      	nop
 80048b8:	2000280b 	.word	0x2000280b

080048bc <__sinit>:
 80048bc:	b510      	push	{r4, lr}
 80048be:	4604      	mov	r4, r0
 80048c0:	f7ff fff0 	bl	80048a4 <__sinit_lock_acquire>
 80048c4:	69a3      	ldr	r3, [r4, #24]
 80048c6:	b11b      	cbz	r3, 80048d0 <__sinit+0x14>
 80048c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048cc:	f7ff bff0 	b.w	80048b0 <__sinit_lock_release>
 80048d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80048d4:	6523      	str	r3, [r4, #80]	; 0x50
 80048d6:	4b13      	ldr	r3, [pc, #76]	; (8004924 <__sinit+0x68>)
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <__sinit+0x6c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	62a2      	str	r2, [r4, #40]	; 0x28
 80048de:	42a3      	cmp	r3, r4
 80048e0:	bf04      	itt	eq
 80048e2:	2301      	moveq	r3, #1
 80048e4:	61a3      	streq	r3, [r4, #24]
 80048e6:	4620      	mov	r0, r4
 80048e8:	f000 f820 	bl	800492c <__sfp>
 80048ec:	6060      	str	r0, [r4, #4]
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 f81c 	bl	800492c <__sfp>
 80048f4:	60a0      	str	r0, [r4, #8]
 80048f6:	4620      	mov	r0, r4
 80048f8:	f000 f818 	bl	800492c <__sfp>
 80048fc:	2200      	movs	r2, #0
 80048fe:	60e0      	str	r0, [r4, #12]
 8004900:	2104      	movs	r1, #4
 8004902:	6860      	ldr	r0, [r4, #4]
 8004904:	f7ff ff82 	bl	800480c <std>
 8004908:	68a0      	ldr	r0, [r4, #8]
 800490a:	2201      	movs	r2, #1
 800490c:	2109      	movs	r1, #9
 800490e:	f7ff ff7d 	bl	800480c <std>
 8004912:	68e0      	ldr	r0, [r4, #12]
 8004914:	2202      	movs	r2, #2
 8004916:	2112      	movs	r1, #18
 8004918:	f7ff ff78 	bl	800480c <std>
 800491c:	2301      	movs	r3, #1
 800491e:	61a3      	str	r3, [r4, #24]
 8004920:	e7d2      	b.n	80048c8 <__sinit+0xc>
 8004922:	bf00      	nop
 8004924:	08004eb4 	.word	0x08004eb4
 8004928:	08004855 	.word	0x08004855

0800492c <__sfp>:
 800492c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800492e:	4607      	mov	r7, r0
 8004930:	f7ff ffac 	bl	800488c <__sfp_lock_acquire>
 8004934:	4b1e      	ldr	r3, [pc, #120]	; (80049b0 <__sfp+0x84>)
 8004936:	681e      	ldr	r6, [r3, #0]
 8004938:	69b3      	ldr	r3, [r6, #24]
 800493a:	b913      	cbnz	r3, 8004942 <__sfp+0x16>
 800493c:	4630      	mov	r0, r6
 800493e:	f7ff ffbd 	bl	80048bc <__sinit>
 8004942:	3648      	adds	r6, #72	; 0x48
 8004944:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004948:	3b01      	subs	r3, #1
 800494a:	d503      	bpl.n	8004954 <__sfp+0x28>
 800494c:	6833      	ldr	r3, [r6, #0]
 800494e:	b30b      	cbz	r3, 8004994 <__sfp+0x68>
 8004950:	6836      	ldr	r6, [r6, #0]
 8004952:	e7f7      	b.n	8004944 <__sfp+0x18>
 8004954:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004958:	b9d5      	cbnz	r5, 8004990 <__sfp+0x64>
 800495a:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <__sfp+0x88>)
 800495c:	60e3      	str	r3, [r4, #12]
 800495e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004962:	6665      	str	r5, [r4, #100]	; 0x64
 8004964:	f000 f847 	bl	80049f6 <__retarget_lock_init_recursive>
 8004968:	f7ff ff96 	bl	8004898 <__sfp_lock_release>
 800496c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004970:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004974:	6025      	str	r5, [r4, #0]
 8004976:	61a5      	str	r5, [r4, #24]
 8004978:	2208      	movs	r2, #8
 800497a:	4629      	mov	r1, r5
 800497c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004980:	f7ff f8d0 	bl	8003b24 <memset>
 8004984:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004988:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800498c:	4620      	mov	r0, r4
 800498e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004990:	3468      	adds	r4, #104	; 0x68
 8004992:	e7d9      	b.n	8004948 <__sfp+0x1c>
 8004994:	2104      	movs	r1, #4
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff ff62 	bl	8004860 <__sfmoreglue>
 800499c:	4604      	mov	r4, r0
 800499e:	6030      	str	r0, [r6, #0]
 80049a0:	2800      	cmp	r0, #0
 80049a2:	d1d5      	bne.n	8004950 <__sfp+0x24>
 80049a4:	f7ff ff78 	bl	8004898 <__sfp_lock_release>
 80049a8:	230c      	movs	r3, #12
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	e7ee      	b.n	800498c <__sfp+0x60>
 80049ae:	bf00      	nop
 80049b0:	08004eb4 	.word	0x08004eb4
 80049b4:	ffff0001 	.word	0xffff0001

080049b8 <_fwalk_reent>:
 80049b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049bc:	4606      	mov	r6, r0
 80049be:	4688      	mov	r8, r1
 80049c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80049c4:	2700      	movs	r7, #0
 80049c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80049ca:	f1b9 0901 	subs.w	r9, r9, #1
 80049ce:	d505      	bpl.n	80049dc <_fwalk_reent+0x24>
 80049d0:	6824      	ldr	r4, [r4, #0]
 80049d2:	2c00      	cmp	r4, #0
 80049d4:	d1f7      	bne.n	80049c6 <_fwalk_reent+0xe>
 80049d6:	4638      	mov	r0, r7
 80049d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049dc:	89ab      	ldrh	r3, [r5, #12]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d907      	bls.n	80049f2 <_fwalk_reent+0x3a>
 80049e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80049e6:	3301      	adds	r3, #1
 80049e8:	d003      	beq.n	80049f2 <_fwalk_reent+0x3a>
 80049ea:	4629      	mov	r1, r5
 80049ec:	4630      	mov	r0, r6
 80049ee:	47c0      	blx	r8
 80049f0:	4307      	orrs	r7, r0
 80049f2:	3568      	adds	r5, #104	; 0x68
 80049f4:	e7e9      	b.n	80049ca <_fwalk_reent+0x12>

080049f6 <__retarget_lock_init_recursive>:
 80049f6:	4770      	bx	lr

080049f8 <__retarget_lock_acquire_recursive>:
 80049f8:	4770      	bx	lr

080049fa <__retarget_lock_release_recursive>:
 80049fa:	4770      	bx	lr

080049fc <__swhatbuf_r>:
 80049fc:	b570      	push	{r4, r5, r6, lr}
 80049fe:	460e      	mov	r6, r1
 8004a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a04:	2900      	cmp	r1, #0
 8004a06:	b096      	sub	sp, #88	; 0x58
 8004a08:	4614      	mov	r4, r2
 8004a0a:	461d      	mov	r5, r3
 8004a0c:	da07      	bge.n	8004a1e <__swhatbuf_r+0x22>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	602b      	str	r3, [r5, #0]
 8004a12:	89b3      	ldrh	r3, [r6, #12]
 8004a14:	061a      	lsls	r2, r3, #24
 8004a16:	d410      	bmi.n	8004a3a <__swhatbuf_r+0x3e>
 8004a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a1c:	e00e      	b.n	8004a3c <__swhatbuf_r+0x40>
 8004a1e:	466a      	mov	r2, sp
 8004a20:	f000 f906 	bl	8004c30 <_fstat_r>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	dbf2      	blt.n	8004a0e <__swhatbuf_r+0x12>
 8004a28:	9a01      	ldr	r2, [sp, #4]
 8004a2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004a2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004a32:	425a      	negs	r2, r3
 8004a34:	415a      	adcs	r2, r3
 8004a36:	602a      	str	r2, [r5, #0]
 8004a38:	e7ee      	b.n	8004a18 <__swhatbuf_r+0x1c>
 8004a3a:	2340      	movs	r3, #64	; 0x40
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	6023      	str	r3, [r4, #0]
 8004a40:	b016      	add	sp, #88	; 0x58
 8004a42:	bd70      	pop	{r4, r5, r6, pc}

08004a44 <__smakebuf_r>:
 8004a44:	898b      	ldrh	r3, [r1, #12]
 8004a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a48:	079d      	lsls	r5, r3, #30
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460c      	mov	r4, r1
 8004a4e:	d507      	bpl.n	8004a60 <__smakebuf_r+0x1c>
 8004a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	6123      	str	r3, [r4, #16]
 8004a58:	2301      	movs	r3, #1
 8004a5a:	6163      	str	r3, [r4, #20]
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd70      	pop	{r4, r5, r6, pc}
 8004a60:	ab01      	add	r3, sp, #4
 8004a62:	466a      	mov	r2, sp
 8004a64:	f7ff ffca 	bl	80049fc <__swhatbuf_r>
 8004a68:	9900      	ldr	r1, [sp, #0]
 8004a6a:	4605      	mov	r5, r0
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	f7ff f9eb 	bl	8003e48 <_malloc_r>
 8004a72:	b948      	cbnz	r0, 8004a88 <__smakebuf_r+0x44>
 8004a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a78:	059a      	lsls	r2, r3, #22
 8004a7a:	d4ef      	bmi.n	8004a5c <__smakebuf_r+0x18>
 8004a7c:	f023 0303 	bic.w	r3, r3, #3
 8004a80:	f043 0302 	orr.w	r3, r3, #2
 8004a84:	81a3      	strh	r3, [r4, #12]
 8004a86:	e7e3      	b.n	8004a50 <__smakebuf_r+0xc>
 8004a88:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <__smakebuf_r+0x7c>)
 8004a8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a8c:	89a3      	ldrh	r3, [r4, #12]
 8004a8e:	6020      	str	r0, [r4, #0]
 8004a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a94:	81a3      	strh	r3, [r4, #12]
 8004a96:	9b00      	ldr	r3, [sp, #0]
 8004a98:	6163      	str	r3, [r4, #20]
 8004a9a:	9b01      	ldr	r3, [sp, #4]
 8004a9c:	6120      	str	r0, [r4, #16]
 8004a9e:	b15b      	cbz	r3, 8004ab8 <__smakebuf_r+0x74>
 8004aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	f000 f8d5 	bl	8004c54 <_isatty_r>
 8004aaa:	b128      	cbz	r0, 8004ab8 <__smakebuf_r+0x74>
 8004aac:	89a3      	ldrh	r3, [r4, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	81a3      	strh	r3, [r4, #12]
 8004ab8:	89a0      	ldrh	r0, [r4, #12]
 8004aba:	4305      	orrs	r5, r0
 8004abc:	81a5      	strh	r5, [r4, #12]
 8004abe:	e7cd      	b.n	8004a5c <__smakebuf_r+0x18>
 8004ac0:	08004855 	.word	0x08004855

08004ac4 <__malloc_lock>:
 8004ac4:	4801      	ldr	r0, [pc, #4]	; (8004acc <__malloc_lock+0x8>)
 8004ac6:	f7ff bf97 	b.w	80049f8 <__retarget_lock_acquire_recursive>
 8004aca:	bf00      	nop
 8004acc:	2000280c 	.word	0x2000280c

08004ad0 <__malloc_unlock>:
 8004ad0:	4801      	ldr	r0, [pc, #4]	; (8004ad8 <__malloc_unlock+0x8>)
 8004ad2:	f7ff bf92 	b.w	80049fa <__retarget_lock_release_recursive>
 8004ad6:	bf00      	nop
 8004ad8:	2000280c 	.word	0x2000280c

08004adc <_raise_r>:
 8004adc:	291f      	cmp	r1, #31
 8004ade:	b538      	push	{r3, r4, r5, lr}
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	460d      	mov	r5, r1
 8004ae4:	d904      	bls.n	8004af0 <_raise_r+0x14>
 8004ae6:	2316      	movs	r3, #22
 8004ae8:	6003      	str	r3, [r0, #0]
 8004aea:	f04f 30ff 	mov.w	r0, #4294967295
 8004aee:	bd38      	pop	{r3, r4, r5, pc}
 8004af0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004af2:	b112      	cbz	r2, 8004afa <_raise_r+0x1e>
 8004af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004af8:	b94b      	cbnz	r3, 8004b0e <_raise_r+0x32>
 8004afa:	4620      	mov	r0, r4
 8004afc:	f000 f830 	bl	8004b60 <_getpid_r>
 8004b00:	462a      	mov	r2, r5
 8004b02:	4601      	mov	r1, r0
 8004b04:	4620      	mov	r0, r4
 8004b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b0a:	f000 b817 	b.w	8004b3c <_kill_r>
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d00a      	beq.n	8004b28 <_raise_r+0x4c>
 8004b12:	1c59      	adds	r1, r3, #1
 8004b14:	d103      	bne.n	8004b1e <_raise_r+0x42>
 8004b16:	2316      	movs	r3, #22
 8004b18:	6003      	str	r3, [r0, #0]
 8004b1a:	2001      	movs	r0, #1
 8004b1c:	e7e7      	b.n	8004aee <_raise_r+0x12>
 8004b1e:	2400      	movs	r4, #0
 8004b20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004b24:	4628      	mov	r0, r5
 8004b26:	4798      	blx	r3
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e7e0      	b.n	8004aee <_raise_r+0x12>

08004b2c <raise>:
 8004b2c:	4b02      	ldr	r3, [pc, #8]	; (8004b38 <raise+0xc>)
 8004b2e:	4601      	mov	r1, r0
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	f7ff bfd3 	b.w	8004adc <_raise_r>
 8004b36:	bf00      	nop
 8004b38:	20000158 	.word	0x20000158

08004b3c <_kill_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	4d07      	ldr	r5, [pc, #28]	; (8004b5c <_kill_r+0x20>)
 8004b40:	2300      	movs	r3, #0
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	602b      	str	r3, [r5, #0]
 8004b4a:	f7fc fbe3 	bl	8001314 <_kill>
 8004b4e:	1c43      	adds	r3, r0, #1
 8004b50:	d102      	bne.n	8004b58 <_kill_r+0x1c>
 8004b52:	682b      	ldr	r3, [r5, #0]
 8004b54:	b103      	cbz	r3, 8004b58 <_kill_r+0x1c>
 8004b56:	6023      	str	r3, [r4, #0]
 8004b58:	bd38      	pop	{r3, r4, r5, pc}
 8004b5a:	bf00      	nop
 8004b5c:	20002814 	.word	0x20002814

08004b60 <_getpid_r>:
 8004b60:	f7fc bbd0 	b.w	8001304 <_getpid>

08004b64 <__sread>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	460c      	mov	r4, r1
 8004b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6c:	f000 f894 	bl	8004c98 <_read_r>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	bfab      	itete	ge
 8004b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b76:	89a3      	ldrhlt	r3, [r4, #12]
 8004b78:	181b      	addge	r3, r3, r0
 8004b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b7e:	bfac      	ite	ge
 8004b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b82:	81a3      	strhlt	r3, [r4, #12]
 8004b84:	bd10      	pop	{r4, pc}

08004b86 <__swrite>:
 8004b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8a:	461f      	mov	r7, r3
 8004b8c:	898b      	ldrh	r3, [r1, #12]
 8004b8e:	05db      	lsls	r3, r3, #23
 8004b90:	4605      	mov	r5, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	4616      	mov	r6, r2
 8004b96:	d505      	bpl.n	8004ba4 <__swrite+0x1e>
 8004b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f000 f868 	bl	8004c74 <_lseek_r>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bae:	81a3      	strh	r3, [r4, #12]
 8004bb0:	4632      	mov	r2, r6
 8004bb2:	463b      	mov	r3, r7
 8004bb4:	4628      	mov	r0, r5
 8004bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bba:	f000 b817 	b.w	8004bec <_write_r>

08004bbe <__sseek>:
 8004bbe:	b510      	push	{r4, lr}
 8004bc0:	460c      	mov	r4, r1
 8004bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc6:	f000 f855 	bl	8004c74 <_lseek_r>
 8004bca:	1c43      	adds	r3, r0, #1
 8004bcc:	89a3      	ldrh	r3, [r4, #12]
 8004bce:	bf15      	itete	ne
 8004bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bda:	81a3      	strheq	r3, [r4, #12]
 8004bdc:	bf18      	it	ne
 8004bde:	81a3      	strhne	r3, [r4, #12]
 8004be0:	bd10      	pop	{r4, pc}

08004be2 <__sclose>:
 8004be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be6:	f000 b813 	b.w	8004c10 <_close_r>
	...

08004bec <_write_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d07      	ldr	r5, [pc, #28]	; (8004c0c <_write_r+0x20>)
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	4608      	mov	r0, r1
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f7fc fbc1 	bl	8001382 <_write>
 8004c00:	1c43      	adds	r3, r0, #1
 8004c02:	d102      	bne.n	8004c0a <_write_r+0x1e>
 8004c04:	682b      	ldr	r3, [r5, #0]
 8004c06:	b103      	cbz	r3, 8004c0a <_write_r+0x1e>
 8004c08:	6023      	str	r3, [r4, #0]
 8004c0a:	bd38      	pop	{r3, r4, r5, pc}
 8004c0c:	20002814 	.word	0x20002814

08004c10 <_close_r>:
 8004c10:	b538      	push	{r3, r4, r5, lr}
 8004c12:	4d06      	ldr	r5, [pc, #24]	; (8004c2c <_close_r+0x1c>)
 8004c14:	2300      	movs	r3, #0
 8004c16:	4604      	mov	r4, r0
 8004c18:	4608      	mov	r0, r1
 8004c1a:	602b      	str	r3, [r5, #0]
 8004c1c:	f7fc fbcd 	bl	80013ba <_close>
 8004c20:	1c43      	adds	r3, r0, #1
 8004c22:	d102      	bne.n	8004c2a <_close_r+0x1a>
 8004c24:	682b      	ldr	r3, [r5, #0]
 8004c26:	b103      	cbz	r3, 8004c2a <_close_r+0x1a>
 8004c28:	6023      	str	r3, [r4, #0]
 8004c2a:	bd38      	pop	{r3, r4, r5, pc}
 8004c2c:	20002814 	.word	0x20002814

08004c30 <_fstat_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d07      	ldr	r5, [pc, #28]	; (8004c50 <_fstat_r+0x20>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	f7fc fbc8 	bl	80013d2 <_fstat>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	d102      	bne.n	8004c4c <_fstat_r+0x1c>
 8004c46:	682b      	ldr	r3, [r5, #0]
 8004c48:	b103      	cbz	r3, 8004c4c <_fstat_r+0x1c>
 8004c4a:	6023      	str	r3, [r4, #0]
 8004c4c:	bd38      	pop	{r3, r4, r5, pc}
 8004c4e:	bf00      	nop
 8004c50:	20002814 	.word	0x20002814

08004c54 <_isatty_r>:
 8004c54:	b538      	push	{r3, r4, r5, lr}
 8004c56:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_isatty_r+0x1c>)
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	4608      	mov	r0, r1
 8004c5e:	602b      	str	r3, [r5, #0]
 8004c60:	f7fc fbc7 	bl	80013f2 <_isatty>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_isatty_r+0x1a>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_isatty_r+0x1a>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	20002814 	.word	0x20002814

08004c74 <_lseek_r>:
 8004c74:	b538      	push	{r3, r4, r5, lr}
 8004c76:	4d07      	ldr	r5, [pc, #28]	; (8004c94 <_lseek_r+0x20>)
 8004c78:	4604      	mov	r4, r0
 8004c7a:	4608      	mov	r0, r1
 8004c7c:	4611      	mov	r1, r2
 8004c7e:	2200      	movs	r2, #0
 8004c80:	602a      	str	r2, [r5, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f7fc fbc0 	bl	8001408 <_lseek>
 8004c88:	1c43      	adds	r3, r0, #1
 8004c8a:	d102      	bne.n	8004c92 <_lseek_r+0x1e>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	b103      	cbz	r3, 8004c92 <_lseek_r+0x1e>
 8004c90:	6023      	str	r3, [r4, #0]
 8004c92:	bd38      	pop	{r3, r4, r5, pc}
 8004c94:	20002814 	.word	0x20002814

08004c98 <_read_r>:
 8004c98:	b538      	push	{r3, r4, r5, lr}
 8004c9a:	4d07      	ldr	r5, [pc, #28]	; (8004cb8 <_read_r+0x20>)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	602a      	str	r2, [r5, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f7fc fb4e 	bl	8001348 <_read>
 8004cac:	1c43      	adds	r3, r0, #1
 8004cae:	d102      	bne.n	8004cb6 <_read_r+0x1e>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	b103      	cbz	r3, 8004cb6 <_read_r+0x1e>
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	20002814 	.word	0x20002814

08004cbc <_init>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr

08004cc8 <_fini>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr
